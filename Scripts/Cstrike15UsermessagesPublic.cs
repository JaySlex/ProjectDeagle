// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cstrike15_usermessages_public.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
//using pbc = global::ProtoBuf.Meta;
using pbr = global::Google.Protobuf.Reflection;
//using pbr = global::ProtoBuf.Serializers;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Cstrike15UsermessagesPublic {

  #region Descriptor
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static Cstrike15UsermessagesPublic() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CiNjc3RyaWtlMTVfdXNlcm1lc3NhZ2VzX3B1YmxpYy5wcm90bxoYbmV0bWVz", 
          "c2FnZXNfcHVibGljLnByb3RvIoIBChJDQ1NVc3JNc2dfVkdVSU1lbnUSDAoE", 
          "bmFtZRgBIAEoCRIMCgRzaG93GAIgASgIEisKB3N1YmtleXMYAyADKAsyGi5D", 
          "Q1NVc3JNc2dfVkdVSU1lbnUuU3Via2V5GiMKBlN1YmtleRIMCgRuYW1lGAEg", 
          "ASgJEgsKA3N0chgCIAEoCSIhChBDQ1NVc3JNc2dfR2VpZ2VyEg0KBXJhbmdl", 
          "GAEgASgFIiAKD0NDU1Vzck1zZ19UcmFpbhINCgV0cmFpbhgBIAEoBSIhChFD", 
          "Q1NVc3JNc2dfSHVkVGV4dBIMCgR0ZXh0GAEgASgJIlUKEUNDU1Vzck1zZ19T", 
          "YXlUZXh0Eg8KB2VudF9pZHgYASABKAUSDAoEdGV4dBgCIAEoCRIMCgRjaGF0", 
          "GAMgASgIEhMKC3RleHRhbGxjaGF0GAQgASgIImoKEkNDU1Vzck1zZ19TYXlU", 
          "ZXh0MhIPCgdlbnRfaWR4GAEgASgFEgwKBGNoYXQYAiABKAgSEAoIbXNnX25h", 
          "bWUYAyABKAkSDgoGcGFyYW1zGAQgAygJEhMKC3RleHRhbGxjaGF0GAUgASgI", 
          "IjQKEUNDU1Vzck1zZ19UZXh0TXNnEg8KB21zZ19kc3QYASABKAUSDgoGcGFy", 
          "YW1zGAMgAygJIuABChBDQ1NVc3JNc2dfSHVkTXNnEg8KB2NoYW5uZWwYASAB", 
          "KAUSGgoDcG9zGAIgASgLMg0uQ01zZ1ZlY3RvcjJEEhcKBGNscjEYAyABKAsy", 
          "CS5DTXNnUkdCQRIXCgRjbHIyGAQgASgLMgkuQ01zZ1JHQkESDgoGZWZmZWN0", 
          "GAUgASgFEhQKDGZhZGVfaW5fdGltZRgGIAEoAhIVCg1mYWRlX291dF90aW1l", 
          "GAcgASgCEhEKCWhvbGRfdGltZRgJIAEoAhIPCgdmeF90aW1lGAogASgCEgwK", 
          "BHRleHQYCyABKAkiYAoPQ0NTVXNyTXNnX1NoYWtlEg8KB2NvbW1hbmQYASAB", 
          "KAUSFwoPbG9jYWxfYW1wbGl0dWRlGAIgASgCEhEKCWZyZXF1ZW5jeRgDIAEo", 
          "AhIQCghkdXJhdGlvbhgEIAEoAiJcCg5DQ1NVc3JNc2dfRmFkZRIQCghkdXJh", 
          "dGlvbhgBIAEoBRIRCglob2xkX3RpbWUYAiABKAUSDQoFZmxhZ3MYAyABKAUS", 
          "FgoDY2xyGAQgASgLMgkuQ01zZ1JHQkEiPgoQQ0NTVXNyTXNnX1J1bWJsZRIN", 
          "CgVpbmRleBgBIAEoBRIMCgRkYXRhGAIgASgFEg0KBWZsYWdzGAMgASgFIk0K", 
          "FkNDU1Vzck1zZ19DbG9zZUNhcHRpb24SDAoEaGFzaBgBIAEoDRIQCghkdXJh", 
          "dGlvbhgCIAEoBRITCgtmcm9tX3BsYXllchgDIAEoCCJTChxDQ1NVc3JNc2df", 
          "Q2xvc2VDYXB0aW9uRGlyZWN0EgwKBGhhc2gYASABKA0SEAoIZHVyYXRpb24Y", 
          "AiABKAUSEwoLZnJvbV9wbGF5ZXIYAyABKAgiKgoTQ0NTVXNyTXNnX1NlbmRB", 
          "dWRpbxITCgtyYWRpb19zb3VuZBgBIAEoCSJdChJDQ1NVc3JNc2dfUmF3QXVk", 
          "aW8SDQoFcGl0Y2gYASABKAUSDgoGZW50aWR4GAIgASgFEhAKCGR1cmF0aW9u", 
          "GAMgASgCEhYKDnZvaWNlX2ZpbGVuYW1lGAQgASgJIqEBChNDQ1NVc3JNc2df", 
          "Vm9pY2VNYXNrEjUKDHBsYXllcl9tYXNrcxgBIAMoCzIfLkNDU1Vzck1zZ19W", 
          "b2ljZU1hc2suUGxheWVyTWFzaxIZChFwbGF5ZXJfbW9kX2VuYWJsZRgCIAEo", 
          "CBo4CgpQbGF5ZXJNYXNrEhcKD2dhbWVfcnVsZXNfbWFzaxgBIAEoBRIRCgli", 
          "YW5fbWFza3MYAiABKAUiTAoQQ0NTVXNyTXNnX0RhbWFnZRIOCgZhbW91bnQY", 
          "ASABKAUSKAoTaW5mbGljdG9yX3dvcmxkX3BvcxgCIAEoCzILLkNNc2dWZWN0", 
          "b3IiWAoTQ0NTVXNyTXNnX1JhZGlvVGV4dBIPCgdtc2dfZHN0GAEgASgFEg4K", 
          "BmNsaWVudBgCIAEoBRIQCghtc2dfbmFtZRgDIAEoCRIOCgZwYXJhbXMYBCAD", 
          "KAkiIgoSQ0NTVXNyTXNnX0hpbnRUZXh0EgwKBHRleHQYASABKAkiJgoVQ0NT", 
          "VXNyTXNnX0tleUhpbnRUZXh0Eg0KBWhpbnRzGAEgAygJItYCCiRDQ1NVc3JN", 
          "c2dfUHJvY2Vzc1Nwb3R0ZWRFbnRpdHlVcGRhdGUSEgoKbmV3X3VwZGF0ZRgB", 
          "IAEoCBJRCg5lbnRpdHlfdXBkYXRlcxgCIAMoCzI5LkNDU1Vzck1zZ19Qcm9j", 
          "ZXNzU3BvdHRlZEVudGl0eVVwZGF0ZS5TcG90dGVkRW50aXR5VXBkYXRlGsYB", 
          "ChNTcG90dGVkRW50aXR5VXBkYXRlEhIKCmVudGl0eV9pZHgYASABKAUSEAoI", 
          "Y2xhc3NfaWQYAiABKAUSEAoIb3JpZ2luX3gYAyABKAUSEAoIb3JpZ2luX3kY", 
          "BCABKAUSEAoIb3JpZ2luX3oYBSABKAUSDwoHYW5nbGVfeRgGIAEoBRIPCgdk", 
          "ZWZ1c2VyGAcgASgIEhoKEnBsYXllcl9oYXNfZGVmdXNlchgIIAEoCBIVCg1w", 
          "bGF5ZXJfaGFzX2M0GAkgASgIIjkKFkNDU1Vzck1zZ19SZWxvYWRFZmZlY3QS", 
          "DgoGZW50aWR4GAEgASgFEg8KB2FjdGFuaW0YAiABKAUiJwoVQ0NTVXNyTXNn", 
          "X0FkanVzdE1vbmV5Eg4KBmFtb3VudBgBIAEoBSJSChFDQ1NVc3JNc2dfS2ls", 
          "bENhbRIQCghvYnNfbW9kZRgBIAEoBRIUCgxmaXJzdF90YXJnZXQYAiABKAUS", 
          "FQoNc2Vjb25kX3RhcmdldBgDIAEoBSKLAQoaQ0NTVXNyTXNnX0Rlc2lyZWRU", 
          "aW1lc2NhbGUSGQoRZGVzaXJlZF90aW1lc2NhbGUYASABKAISHQoVZHVyYXRp", 
          "b25fcmVhbHRpbWVfc2VjGAIgASgCEhkKEWludGVycG9sYXRvcl90eXBlGAMg", 
          "ASgFEhgKEHN0YXJ0X2JsZW5kX3RpbWUYBCABKAIiMwoaQ0NTVXNyTXNnX0N1", 
          "cnJlbnRUaW1lc2NhbGUSFQoNY3VyX3RpbWVzY2FsZRgBIAEoAiJRChpDQ1NV", 
          "c3JNc2dfQWNoaWV2ZW1lbnRFdmVudBITCgthY2hpZXZlbWVudBgBIAEoBRIN", 
          "CgVjb3VudBgCIAEoBRIPCgd1c2VyX2lkGAMgASgFInIKHENDU1Vzck1zZ19N", 
          "YXRjaEVuZENvbmRpdGlvbnMSEQoJZnJhZ2xpbWl0GAEgASgFEhQKDG1wX21h", 
          "eHJvdW5kcxgCIAEoBRITCgttcF93aW5saW1pdBgDIAEoBRIUCgxtcF90aW1l", 
          "bGltaXQYBCABKAUiPgoaQ0NTVXNyTXNnX0Rpc3BsYXlJbnZlbnRvcnkSDwoH", 
          "ZGlzcGxheRgBIAEoCBIPCgd1c2VyX2lkGAIgASgFIjgKGENDU1Vzck1zZ19D", 
          "YWxsVm90ZUZhaWxlZBIOCgZyZWFzb24YASABKAUSDAoEdGltZRgCIAEoBSKe", 
          "AQoTQ0NTVXNyTXNnX1ZvdGVTdGFydBIMCgR0ZWFtGAEgASgFEg8KB2VudF9p", 
          "ZHgYAiABKAUSEQoJdm90ZV90eXBlGAMgASgFEhAKCGRpc3Bfc3RyGAQgASgJ", 
          "EhMKC2RldGFpbHNfc3RyGAUgASgJEhYKDm90aGVyX3RlYW1fc3RyGAYgASgJ", 
          "EhYKDmlzX3llc19ub192b3RlGAcgASgIIlwKEkNDU1Vzck1zZ19Wb3RlUGFz", 
          "cxIMCgR0ZWFtGAEgASgFEhEKCXZvdGVfdHlwZRgCIAEoBRIQCghkaXNwX3N0", 
          "chgDIAEoCRITCgtkZXRhaWxzX3N0chgEIAEoCSI0ChRDQ1NVc3JNc2dfVm90", 
          "ZUZhaWxlZBIMCgR0ZWFtGAEgASgFEg4KBnJlYXNvbhgCIAEoBSIvChNDQ1NV", 
          "c3JNc2dfVm90ZVNldHVwEhgKEHBvdGVudGlhbF9pc3N1ZXMYASADKAkihAEK", 
          "JkNDU1Vzck1zZ19TZW5kTGFzdEtpbGxlckRhbWFnZVRvQ2xpZW50EhYKDm51", 
          "bV9oaXRzX2dpdmVuGAEgASgFEhQKDGRhbWFnZV9naXZlbhgCIAEoBRIWCg5u", 
          "dW1faGl0c190YWtlbhgDIAEoBRIUCgxkYW1hZ2VfdGFrZW4YBCABKAUiJAoU", 
          "Q0NTVXNyTXNnX0l0ZW1QaWNrdXASDAoEaXRlbRgBIAEoCSJZChJDQ1NVc3JN", 
          "c2dfU2hvd01lbnUSGAoQYml0c192YWxpZF9zbG90cxgBIAEoBRIUCgxkaXNw", 
          "bGF5X3RpbWUYAiABKAUSEwoLbWVudV9zdHJpbmcYAyABKAkiIQoRQ0NTVXNy", 
          "TXNnX0JhclRpbWUSDAoEdGltZRgBIAEoCSInChRDQ1NVc3JNc2dfQW1tb0Rl", 
          "bmllZBIPCgdhbW1vSWR4GAEgASgFIjAKGUNDU1Vzck1zZ19NYXJrQWNoaWV2", 
          "ZW1lbnQSEwoLYWNoaWV2ZW1lbnQYASABKAkiMwoSQ0NTVXNyTXNnX0l0ZW1E", 
          "cm9wEg4KBml0ZW1pZBgBIAEoAxINCgVkZWF0aBgCIAEoCCIrChlDQ1NVc3JN", 
          "c2dfR2xvd1Byb3BUdXJuT2ZmEg4KBmVudGlkeBgBIAEoBSJiCh5DQ1NVc3JN", 
          "c2dfUm91bmRCYWNrdXBGaWxlbmFtZXMSDQoFY291bnQYASABKAUSDQoFaW5k", 
          "ZXgYAiABKAUSEAoIZmlsZW5hbWUYAyABKAkSEAoIbmljZW5hbWUYBCABKAki", 
          "IwoSQ0NTVXNyTXNnX1Jlc2V0SHVkEg0KBXJlc2V0GAEgASgIIiQKE0NDU1Vz", 
          "ck1zZ19HYW1lVGl0bGUSDQoFZHVtbXkYASABKAUiJwoWQ0NTVXNyTXNnX1Jl", 
          "cXVlc3RTdGF0ZRINCgVkdW1teRgBIAEoBSIsChtDQ1NVc3JNc2dfU3RvcFNw", 
          "ZWN0YXRvck1vZGUSDQoFZHVtbXkYASABKAUiLAobQ0NTVXNyTXNnX0Rpc2Nv", 
          "bm5lY3RUb0xvYmJ5Eg0KBWR1bW15GAEgASgFIikKGENDU1Vzck1zZ19XYXJt", 
          "dXBIYXNFbmRlZBINCgVkdW1teRgBIAEoBSIlChRDQ1NVc3JNc2dfQ2xpZW50", 
          "SW5mbxINCgVkdW1teRgBIAEoBSqgCQoWRUNzdHJpa2UxNVVzZXJNZXNzYWdl", 
          "cxIICgRibGVoEAASEgoOQ1NfVU1fVkdVSU1lbnUQARIQCgxDU19VTV9HZWln", 
          "ZXIQAhIPCgtDU19VTV9UcmFpbhADEhEKDUNTX1VNX0h1ZFRleHQQBBIRCg1D", 
          "U19VTV9TYXlUZXh0EAUSEgoOQ1NfVU1fU2F5VGV4dDIQBhIRCg1DU19VTV9U", 
          "ZXh0TXNnEAcSEAoMQ1NfVU1fSHVkTXNnEAgSEgoOQ1NfVU1fUmVzZXRIdWQQ", 
          "CRITCg9DU19VTV9HYW1lVGl0bGUQChIPCgtDU19VTV9TaGFrZRAMEg4KCkNT", 
          "X1VNX0ZhZGUQDRIQCgxDU19VTV9SdW1ibGUQDhIWChJDU19VTV9DbG9zZUNh", 
          "cHRpb24QDxIcChhDU19VTV9DbG9zZUNhcHRpb25EaXJlY3QQEBITCg9DU19V", 
          "TV9TZW5kQXVkaW8QERISCg5DU19VTV9SYXdBdWRpbxASEhMKD0NTX1VNX1Zv", 
          "aWNlTWFzaxATEhYKEkNTX1VNX1JlcXVlc3RTdGF0ZRAUEhAKDENTX1VNX0Rh", 
          "bWFnZRAVEhMKD0NTX1VNX1JhZGlvVGV4dBAWEhIKDkNTX1VNX0hpbnRUZXh0", 
          "EBcSFQoRQ1NfVU1fS2V5SGludFRleHQQGBIkCiBDU19VTV9Qcm9jZXNzU3Bv", 
          "dHRlZEVudGl0eVVwZGF0ZRAZEhYKEkNTX1VNX1JlbG9hZEVmZmVjdBAaEhUK", 
          "EUNTX1VNX0FkanVzdE1vbmV5EBsSGQoVQ1NfVU1fVXBkYXRlVGVhbU1vbmV5", 
          "EBwSGwoXQ1NfVU1fU3RvcFNwZWN0YXRvck1vZGUQHRIRCg1DU19VTV9LaWxs", 
          "Q2FtEB4SGgoWQ1NfVU1fRGVzaXJlZFRpbWVzY2FsZRAfEhoKFkNTX1VNX0N1", 
          "cnJlbnRUaW1lc2NhbGUQIBIaChZDU19VTV9BY2hpZXZlbWVudEV2ZW50ECES", 
          "HAoYQ1NfVU1fTWF0Y2hFbmRDb25kaXRpb25zECISGwoXQ1NfVU1fRGlzY29u", 
          "bmVjdFRvTG9iYnkQIxIaChZDU19VTV9EaXNwbGF5SW52ZW50b3J5ECUSGAoU", 
          "Q1NfVU1fV2FybXVwSGFzRW5kZWQQJhIUChBDU19VTV9DbGllbnRJbmZvECcS", 
          "GAoUQ1NfVU1fQ2FsbFZvdGVGYWlsZWQQLRITCg9DU19VTV9Wb3RlU3RhcnQQ", 
          "LhISCg5DU19VTV9Wb3RlUGFzcxAvEhQKEENTX1VNX1ZvdGVGYWlsZWQQMBIT", 
          "Cg9DU19VTV9Wb3RlU2V0dXAQMRImCiJDU19VTV9TZW5kTGFzdEtpbGxlckRh", 
          "bWFnZVRvQ2xpZW50EDMSFAoQQ1NfVU1fSXRlbVBpY2t1cBA1EhIKDkNTX1VN", 
          "X1Nob3dNZW51EDYSEQoNQ1NfVU1fQmFyVGltZRA3EhQKEENTX1VNX0FtbW9E", 
          "ZW5pZWQQOBIZChVDU19VTV9NYXJrQWNoaWV2ZW1lbnQQORISCg5DU19VTV9J", 
          "dGVtRHJvcBA7EhkKFUNTX1VNX0dsb3dQcm9wVHVybk9mZhA8QgVIAYABAGIG", 
          "cHJvdG8z"));
    descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbr::FileDescriptor[] { global::NetmessagesPublic.Descriptor, },
        new pbr::GeneratedCodeInfo(new[] {typeof(global::ECstrike15UserMessages), }, new pbr::GeneratedCodeInfo[] {
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VGUIMenu), new[]{ "Name", "Show", "Subkeys" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VGUIMenu.Types.Subkey), new[]{ "Name", "Str" }, null, null, null)}),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Geiger), new[]{ "Range" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Train), new[]{ "Train" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_HudText), new[]{ "Text" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_SayText), new[]{ "EntIdx", "Text", "Chat", "Textallchat" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_SayText2), new[]{ "EntIdx", "Chat", "MsgName", "Params", "Textallchat" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_TextMsg), new[]{ "MsgDst", "Params" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_HudMsg), new[]{ "Channel", "Pos", "Clr1", "Clr2", "Effect", "FadeInTime", "FadeOutTime", "HoldTime", "FxTime", "Text" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Shake), new[]{ "Command", "LocalAmplitude", "Frequency", "Duration" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Fade), new[]{ "Duration", "HoldTime", "Flags", "Clr" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Rumble), new[]{ "Index", "Data", "Flags" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_CloseCaption), new[]{ "Hash", "Duration", "FromPlayer" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_CloseCaptionDirect), new[]{ "Hash", "Duration", "FromPlayer" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_SendAudio), new[]{ "RadioSound" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_RawAudio), new[]{ "Pitch", "Entidx", "Duration", "VoiceFilename" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VoiceMask), new[]{ "PlayerMasks", "PlayerModEnable" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VoiceMask.Types.PlayerMask), new[]{ "GameRulesMask", "BanMasks" }, null, null, null)}),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_Damage), new[]{ "Amount", "InflictorWorldPos" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_RadioText), new[]{ "MsgDst", "Client", "MsgName", "Params" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_HintText), new[]{ "Text" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_KeyHintText), new[]{ "Hints" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ProcessSpottedEntityUpdate), new[]{ "NewUpdate", "EntityUpdates" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate), new[]{ "EntityIdx", "ClassId", "OriginX", "OriginY", "OriginZ", "AngleY", "Defuser", "PlayerHasDefuser", "PlayerHasC4" }, null, null, null)}),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ReloadEffect), new[]{ "Entidx", "Actanim" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_AdjustMoney), new[]{ "Amount" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_KillCam), new[]{ "ObsMode", "FirstTarget", "SecondTarget" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_DesiredTimescale), new[]{ "DesiredTimescale", "DurationRealtimeSec", "InterpolatorType", "StartBlendTime" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_CurrentTimescale), new[]{ "CurTimescale" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_AchievementEvent), new[]{ "Achievement", "Count", "UserId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_MatchEndConditions), new[]{ "Fraglimit", "MpMaxrounds", "MpWinlimit", "MpTimelimit" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_DisplayInventory), new[]{ "Display", "UserId" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_CallVoteFailed), new[]{ "Reason", "Time" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VoteStart), new[]{ "Team", "EntIdx", "VoteType", "DispStr", "DetailsStr", "OtherTeamStr", "IsYesNoVote" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VotePass), new[]{ "Team", "VoteType", "DispStr", "DetailsStr" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VoteFailed), new[]{ "Team", "Reason" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_VoteSetup), new[]{ "PotentialIssues" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_SendLastKillerDamageToClient), new[]{ "NumHitsGiven", "DamageGiven", "NumHitsTaken", "DamageTaken" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ItemPickup), new[]{ "Item" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ShowMenu), new[]{ "BitsValidSlots", "DisplayTime", "MenuString" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_BarTime), new[]{ "Time" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_AmmoDenied), new[]{ "AmmoIdx" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_MarkAchievement), new[]{ "Achievement" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ItemDrop), new[]{ "Itemid", "Death" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_GlowPropTurnOff), new[]{ "Entidx" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_RoundBackupFilenames), new[]{ "Count", "Index", "Filename", "Nicename" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ResetHud), new[]{ "Reset" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_GameTitle), new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_RequestState), new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_StopSpectatorMode), new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_DisconnectToLobby), new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_WarmupHasEnded), new[]{ "Dummy" }, null, null, null),
          new pbr::GeneratedCodeInfo(typeof(global::CCSUsrMsg_ClientInfo), new[]{ "Dummy" }, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum ECstrike15UserMessages {
  bleh = 0,
  CS_UM_VGUIMenu = 1,
  CS_UM_Geiger = 2,
  CS_UM_Train = 3,
  CS_UM_HudText = 4,
  CS_UM_SayText = 5,
  CS_UM_SayText2 = 6,
  CS_UM_TextMsg = 7,
  CS_UM_HudMsg = 8,
  CS_UM_ResetHud = 9,
  CS_UM_GameTitle = 10,
  CS_UM_Shake = 12,
  CS_UM_Fade = 13,
  CS_UM_Rumble = 14,
  CS_UM_CloseCaption = 15,
  CS_UM_CloseCaptionDirect = 16,
  CS_UM_SendAudio = 17,
  CS_UM_RawAudio = 18,
  CS_UM_VoiceMask = 19,
  CS_UM_RequestState = 20,
  CS_UM_Damage = 21,
  CS_UM_RadioText = 22,
  CS_UM_HintText = 23,
  CS_UM_KeyHintText = 24,
  CS_UM_ProcessSpottedEntityUpdate = 25,
  CS_UM_ReloadEffect = 26,
  CS_UM_AdjustMoney = 27,
  CS_UM_UpdateTeamMoney = 28,
  CS_UM_StopSpectatorMode = 29,
  CS_UM_KillCam = 30,
  CS_UM_DesiredTimescale = 31,
  CS_UM_CurrentTimescale = 32,
  CS_UM_AchievementEvent = 33,
  CS_UM_MatchEndConditions = 34,
  CS_UM_DisconnectToLobby = 35,
  CS_UM_DisplayInventory = 37,
  CS_UM_WarmupHasEnded = 38,
  CS_UM_ClientInfo = 39,
  CS_UM_CallVoteFailed = 45,
  CS_UM_VoteStart = 46,
  CS_UM_VotePass = 47,
  CS_UM_VoteFailed = 48,
  CS_UM_VoteSetup = 49,
  CS_UM_SendLastKillerDamageToClient = 51,
  CS_UM_ItemPickup = 53,
  CS_UM_ShowMenu = 54,
  CS_UM_BarTime = 55,
  CS_UM_AmmoDenied = 56,
  CS_UM_MarkAchievement = 57,
  CS_UM_ItemDrop = 59,
  CS_UM_GlowPropTurnOff = 60,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VGUIMenu : pb::IMessage<CCSUsrMsg_VGUIMenu> {
  private static readonly pb::MessageParser<CCSUsrMsg_VGUIMenu> _parser = new pb::MessageParser<CCSUsrMsg_VGUIMenu>(() => new CCSUsrMsg_VGUIMenu());
  public static pb::MessageParser<CCSUsrMsg_VGUIMenu> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[0]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VGUIMenu() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VGUIMenu(CCSUsrMsg_VGUIMenu other) : this() {
    name_ = other.name_;
    show_ = other.show_;
    subkeys_ = other.subkeys_.Clone();
  }

  public CCSUsrMsg_VGUIMenu Clone() {
    return new CCSUsrMsg_VGUIMenu(this);
  }

  public const int NameFieldNumber = 1;
  private string name_ = "";
  public string Name {
    get { return name_; }
    set {
      name_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int ShowFieldNumber = 2;
  private bool show_;
  public bool Show {
    get { return show_; }
    set {
      show_ = value;
    }
  }

  public const int SubkeysFieldNumber = 3;
  private static readonly pb::FieldCodec<global::CCSUsrMsg_VGUIMenu.Types.Subkey> _repeated_subkeys_codec
      = pb::FieldCodec.ForMessage(26, global::CCSUsrMsg_VGUIMenu.Types.Subkey.Parser);
  private readonly pbc::RepeatedField<global::CCSUsrMsg_VGUIMenu.Types.Subkey> subkeys_ = new pbc::RepeatedField<global::CCSUsrMsg_VGUIMenu.Types.Subkey>();
  public pbc::RepeatedField<global::CCSUsrMsg_VGUIMenu.Types.Subkey> Subkeys {
    get { return subkeys_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VGUIMenu);
  }

  public bool Equals(CCSUsrMsg_VGUIMenu other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Show != other.Show) return false;
    if(!subkeys_.Equals(other.subkeys_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Show != false) hash ^= Show.GetHashCode();
    hash ^= subkeys_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Show != false) {
      output.WriteRawTag(16);
      output.WriteBool(Show);
    }
    subkeys_.WriteTo(output, _repeated_subkeys_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Show != false) {
      size += 1 + 1;
    }
    size += subkeys_.CalculateSize(_repeated_subkeys_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VGUIMenu other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Show != false) {
      Show = other.Show;
    }
    subkeys_.Add(other.subkeys_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 16: {
          Show = input.ReadBool();
          break;
        }
        case 26: {
          subkeys_.AddEntriesFrom(input, _repeated_subkeys_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Subkey : pb::IMessage<Subkey> {
      private static readonly pb::MessageParser<Subkey> _parser = new pb::MessageParser<Subkey>(() => new Subkey());
      public static pb::MessageParser<Subkey> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::CCSUsrMsg_VGUIMenu.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public Subkey() {
        OnConstruction();
      }

      partial void OnConstruction();

      public Subkey(Subkey other) : this() {
        name_ = other.name_;
        str_ = other.str_;
      }

      public Subkey Clone() {
        return new Subkey(this);
      }

      public const int NameFieldNumber = 1;
      private string name_ = "";
      public string Name {
        get { return name_; }
        set {
          name_ = pb::Preconditions.CheckNotNull(value, "value");
        }
      }

      public const int StrFieldNumber = 2;
      private string str_ = "";
      public string Str {
        get { return str_; }
        set {
          str_ = pb::Preconditions.CheckNotNull(value, "value");
        }
      }

      public override bool Equals(object other) {
        return Equals(other as Subkey);
      }

      public bool Equals(Subkey other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Name != other.Name) return false;
        if (Str != other.Str) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (Name.Length != 0) hash ^= Name.GetHashCode();
        if (Str.Length != 0) hash ^= Str.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.Default.Format(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (Name.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Name);
        }
        if (Str.Length != 0) {
          output.WriteRawTag(18);
          output.WriteString(Str);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (Name.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
        }
        if (Str.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Str);
        }
        return size;
      }

      public void MergeFrom(Subkey other) {
        if (other == null) {
          return;
        }
        if (other.Name.Length != 0) {
          Name = other.Name;
        }
        if (other.Str.Length != 0) {
          Str = other.Str;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Name = input.ReadString();
              break;
            }
            case 18: {
              Str = input.ReadString();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Geiger : pb::IMessage<CCSUsrMsg_Geiger> {
  private static readonly pb::MessageParser<CCSUsrMsg_Geiger> _parser = new pb::MessageParser<CCSUsrMsg_Geiger>(() => new CCSUsrMsg_Geiger());
  public static pb::MessageParser<CCSUsrMsg_Geiger> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[1]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Geiger() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Geiger(CCSUsrMsg_Geiger other) : this() {
    range_ = other.range_;
  }

  public CCSUsrMsg_Geiger Clone() {
    return new CCSUsrMsg_Geiger(this);
  }

  public const int RangeFieldNumber = 1;
  private int range_;
  public int Range {
    get { return range_; }
    set {
      range_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Geiger);
  }

  public bool Equals(CCSUsrMsg_Geiger other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Range != other.Range) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Range != 0) hash ^= Range.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Range != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Range);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Range != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Range);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Geiger other) {
    if (other == null) {
      return;
    }
    if (other.Range != 0) {
      Range = other.Range;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Range = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Train : pb::IMessage<CCSUsrMsg_Train> {
  private static readonly pb::MessageParser<CCSUsrMsg_Train> _parser = new pb::MessageParser<CCSUsrMsg_Train>(() => new CCSUsrMsg_Train());
  public static pb::MessageParser<CCSUsrMsg_Train> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[2]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Train() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Train(CCSUsrMsg_Train other) : this() {
    train_ = other.train_;
  }

  public CCSUsrMsg_Train Clone() {
    return new CCSUsrMsg_Train(this);
  }

  public const int TrainFieldNumber = 1;
  private int train_;
  public int Train {
    get { return train_; }
    set {
      train_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Train);
  }

  public bool Equals(CCSUsrMsg_Train other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Train != other.Train) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Train != 0) hash ^= Train.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Train != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Train);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Train != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Train);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Train other) {
    if (other == null) {
      return;
    }
    if (other.Train != 0) {
      Train = other.Train;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Train = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_HudText : pb::IMessage<CCSUsrMsg_HudText> {
  private static readonly pb::MessageParser<CCSUsrMsg_HudText> _parser = new pb::MessageParser<CCSUsrMsg_HudText>(() => new CCSUsrMsg_HudText());
  public static pb::MessageParser<CCSUsrMsg_HudText> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[3]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_HudText() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_HudText(CCSUsrMsg_HudText other) : this() {
    text_ = other.text_;
  }

  public CCSUsrMsg_HudText Clone() {
    return new CCSUsrMsg_HudText(this);
  }

  public const int TextFieldNumber = 1;
  private string text_ = "";
  public string Text {
    get { return text_; }
    set {
      text_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_HudText);
  }

  public bool Equals(CCSUsrMsg_HudText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_HudText other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_SayText : pb::IMessage<CCSUsrMsg_SayText> {
  private static readonly pb::MessageParser<CCSUsrMsg_SayText> _parser = new pb::MessageParser<CCSUsrMsg_SayText>(() => new CCSUsrMsg_SayText());
  public static pb::MessageParser<CCSUsrMsg_SayText> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[4]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_SayText() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_SayText(CCSUsrMsg_SayText other) : this() {
    entIdx_ = other.entIdx_;
    text_ = other.text_;
    chat_ = other.chat_;
    textallchat_ = other.textallchat_;
  }

  public CCSUsrMsg_SayText Clone() {
    return new CCSUsrMsg_SayText(this);
  }

  public const int EntIdxFieldNumber = 1;
  private int entIdx_;
  public int EntIdx {
    get { return entIdx_; }
    set {
      entIdx_ = value;
    }
  }

  public const int TextFieldNumber = 2;
  private string text_ = "";
  public string Text {
    get { return text_; }
    set {
      text_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int ChatFieldNumber = 3;
  private bool chat_;
  public bool Chat {
    get { return chat_; }
    set {
      chat_ = value;
    }
  }

  public const int TextallchatFieldNumber = 4;
  private bool textallchat_;
  public bool Textallchat {
    get { return textallchat_; }
    set {
      textallchat_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_SayText);
  }

  public bool Equals(CCSUsrMsg_SayText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EntIdx != other.EntIdx) return false;
    if (Text != other.Text) return false;
    if (Chat != other.Chat) return false;
    if (Textallchat != other.Textallchat) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (EntIdx != 0) hash ^= EntIdx.GetHashCode();
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    if (Chat != false) hash ^= Chat.GetHashCode();
    if (Textallchat != false) hash ^= Textallchat.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (EntIdx != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EntIdx);
    }
    if (Text.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Text);
    }
    if (Chat != false) {
      output.WriteRawTag(24);
      output.WriteBool(Chat);
    }
    if (Textallchat != false) {
      output.WriteRawTag(32);
      output.WriteBool(Textallchat);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (EntIdx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntIdx);
    }
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    if (Chat != false) {
      size += 1 + 1;
    }
    if (Textallchat != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_SayText other) {
    if (other == null) {
      return;
    }
    if (other.EntIdx != 0) {
      EntIdx = other.EntIdx;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
    if (other.Chat != false) {
      Chat = other.Chat;
    }
    if (other.Textallchat != false) {
      Textallchat = other.Textallchat;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EntIdx = input.ReadInt32();
          break;
        }
        case 18: {
          Text = input.ReadString();
          break;
        }
        case 24: {
          Chat = input.ReadBool();
          break;
        }
        case 32: {
          Textallchat = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_SayText2 : pb::IMessage<CCSUsrMsg_SayText2> {
  private static readonly pb::MessageParser<CCSUsrMsg_SayText2> _parser = new pb::MessageParser<CCSUsrMsg_SayText2>(() => new CCSUsrMsg_SayText2());
  public static pb::MessageParser<CCSUsrMsg_SayText2> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[5]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_SayText2() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_SayText2(CCSUsrMsg_SayText2 other) : this() {
    entIdx_ = other.entIdx_;
    chat_ = other.chat_;
    msgName_ = other.msgName_;
    params_ = other.params_.Clone();
    textallchat_ = other.textallchat_;
  }

  public CCSUsrMsg_SayText2 Clone() {
    return new CCSUsrMsg_SayText2(this);
  }

  public const int EntIdxFieldNumber = 1;
  private int entIdx_;
  public int EntIdx {
    get { return entIdx_; }
    set {
      entIdx_ = value;
    }
  }

  public const int ChatFieldNumber = 2;
  private bool chat_;
  public bool Chat {
    get { return chat_; }
    set {
      chat_ = value;
    }
  }

  public const int MsgNameFieldNumber = 3;
  private string msgName_ = "";
  public string MsgName {
    get { return msgName_; }
    set {
      msgName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int ParamsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_params_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> params_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Params {
    get { return params_; }
  }

  public const int TextallchatFieldNumber = 5;
  private bool textallchat_;
  public bool Textallchat {
    get { return textallchat_; }
    set {
      textallchat_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_SayText2);
  }

  public bool Equals(CCSUsrMsg_SayText2 other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EntIdx != other.EntIdx) return false;
    if (Chat != other.Chat) return false;
    if (MsgName != other.MsgName) return false;
    if(!params_.Equals(other.params_)) return false;
    if (Textallchat != other.Textallchat) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (EntIdx != 0) hash ^= EntIdx.GetHashCode();
    if (Chat != false) hash ^= Chat.GetHashCode();
    if (MsgName.Length != 0) hash ^= MsgName.GetHashCode();
    hash ^= params_.GetHashCode();
    if (Textallchat != false) hash ^= Textallchat.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (EntIdx != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(EntIdx);
    }
    if (Chat != false) {
      output.WriteRawTag(16);
      output.WriteBool(Chat);
    }
    if (MsgName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MsgName);
    }
    params_.WriteTo(output, _repeated_params_codec);
    if (Textallchat != false) {
      output.WriteRawTag(40);
      output.WriteBool(Textallchat);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (EntIdx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntIdx);
    }
    if (Chat != false) {
      size += 1 + 1;
    }
    if (MsgName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgName);
    }
    size += params_.CalculateSize(_repeated_params_codec);
    if (Textallchat != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_SayText2 other) {
    if (other == null) {
      return;
    }
    if (other.EntIdx != 0) {
      EntIdx = other.EntIdx;
    }
    if (other.Chat != false) {
      Chat = other.Chat;
    }
    if (other.MsgName.Length != 0) {
      MsgName = other.MsgName;
    }
    params_.Add(other.params_);
    if (other.Textallchat != false) {
      Textallchat = other.Textallchat;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          EntIdx = input.ReadInt32();
          break;
        }
        case 16: {
          Chat = input.ReadBool();
          break;
        }
        case 26: {
          MsgName = input.ReadString();
          break;
        }
        case 34: {
          params_.AddEntriesFrom(input, _repeated_params_codec);
          break;
        }
        case 40: {
          Textallchat = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_TextMsg : pb::IMessage<CCSUsrMsg_TextMsg> {
  private static readonly pb::MessageParser<CCSUsrMsg_TextMsg> _parser = new pb::MessageParser<CCSUsrMsg_TextMsg>(() => new CCSUsrMsg_TextMsg());
  public static pb::MessageParser<CCSUsrMsg_TextMsg> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[6]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_TextMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_TextMsg(CCSUsrMsg_TextMsg other) : this() {
    msgDst_ = other.msgDst_;
    params_ = other.params_.Clone();
  }

  public CCSUsrMsg_TextMsg Clone() {
    return new CCSUsrMsg_TextMsg(this);
  }

  public const int MsgDstFieldNumber = 1;
  private int msgDst_;
  public int MsgDst {
    get { return msgDst_; }
    set {
      msgDst_ = value;
    }
  }

  public const int ParamsFieldNumber = 3;
  private static readonly pb::FieldCodec<string> _repeated_params_codec
      = pb::FieldCodec.ForString(26);
  private readonly pbc::RepeatedField<string> params_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Params {
    get { return params_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_TextMsg);
  }

  public bool Equals(CCSUsrMsg_TextMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgDst != other.MsgDst) return false;
    if(!params_.Equals(other.params_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (MsgDst != 0) hash ^= MsgDst.GetHashCode();
    hash ^= params_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgDst != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MsgDst);
    }
    params_.WriteTo(output, _repeated_params_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (MsgDst != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgDst);
    }
    size += params_.CalculateSize(_repeated_params_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_TextMsg other) {
    if (other == null) {
      return;
    }
    if (other.MsgDst != 0) {
      MsgDst = other.MsgDst;
    }
    params_.Add(other.params_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MsgDst = input.ReadInt32();
          break;
        }
        case 26: {
          params_.AddEntriesFrom(input, _repeated_params_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_HudMsg : pb::IMessage<CCSUsrMsg_HudMsg> {
  private static readonly pb::MessageParser<CCSUsrMsg_HudMsg> _parser = new pb::MessageParser<CCSUsrMsg_HudMsg>(() => new CCSUsrMsg_HudMsg());
  public static pb::MessageParser<CCSUsrMsg_HudMsg> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[7]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_HudMsg() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_HudMsg(CCSUsrMsg_HudMsg other) : this() {
    channel_ = other.channel_;
    Pos = other.pos_ != null ? other.Pos.Clone() : null;
    Clr1 = other.clr1_ != null ? other.Clr1.Clone() : null;
    Clr2 = other.clr2_ != null ? other.Clr2.Clone() : null;
    effect_ = other.effect_;
    fadeInTime_ = other.fadeInTime_;
    fadeOutTime_ = other.fadeOutTime_;
    holdTime_ = other.holdTime_;
    fxTime_ = other.fxTime_;
    text_ = other.text_;
  }

  public CCSUsrMsg_HudMsg Clone() {
    return new CCSUsrMsg_HudMsg(this);
  }

  public const int ChannelFieldNumber = 1;
  private int channel_;
  public int Channel {
    get { return channel_; }
    set {
      channel_ = value;
    }
  }

  public const int PosFieldNumber = 2;
  private global::CMsgVector2D pos_;
  public global::CMsgVector2D Pos {
    get { return pos_; }
    set {
      pos_ = value;
    }
  }

  public const int Clr1FieldNumber = 3;
  private global::CMsgRGBA clr1_;
  public global::CMsgRGBA Clr1 {
    get { return clr1_; }
    set {
      clr1_ = value;
    }
  }

  public const int Clr2FieldNumber = 4;
  private global::CMsgRGBA clr2_;
  public global::CMsgRGBA Clr2 {
    get { return clr2_; }
    set {
      clr2_ = value;
    }
  }

  public const int EffectFieldNumber = 5;
  private int effect_;
  public int Effect {
    get { return effect_; }
    set {
      effect_ = value;
    }
  }

  public const int FadeInTimeFieldNumber = 6;
  private float fadeInTime_;
  public float FadeInTime {
    get { return fadeInTime_; }
    set {
      fadeInTime_ = value;
    }
  }

  public const int FadeOutTimeFieldNumber = 7;
  private float fadeOutTime_;
  public float FadeOutTime {
    get { return fadeOutTime_; }
    set {
      fadeOutTime_ = value;
    }
  }

  public const int HoldTimeFieldNumber = 9;
  private float holdTime_;
  public float HoldTime {
    get { return holdTime_; }
    set {
      holdTime_ = value;
    }
  }

  public const int FxTimeFieldNumber = 10;
  private float fxTime_;
  public float FxTime {
    get { return fxTime_; }
    set {
      fxTime_ = value;
    }
  }

  public const int TextFieldNumber = 11;
  private string text_ = "";
  public string Text {
    get { return text_; }
    set {
      text_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_HudMsg);
  }

  public bool Equals(CCSUsrMsg_HudMsg other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Channel != other.Channel) return false;
    if (!object.Equals(Pos, other.Pos)) return false;
    if (!object.Equals(Clr1, other.Clr1)) return false;
    if (!object.Equals(Clr2, other.Clr2)) return false;
    if (Effect != other.Effect) return false;
    if (FadeInTime != other.FadeInTime) return false;
    if (FadeOutTime != other.FadeOutTime) return false;
    if (HoldTime != other.HoldTime) return false;
    if (FxTime != other.FxTime) return false;
    if (Text != other.Text) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Channel != 0) hash ^= Channel.GetHashCode();
    if (pos_ != null) hash ^= Pos.GetHashCode();
    if (clr1_ != null) hash ^= Clr1.GetHashCode();
    if (clr2_ != null) hash ^= Clr2.GetHashCode();
    if (Effect != 0) hash ^= Effect.GetHashCode();
    if (FadeInTime != 0F) hash ^= FadeInTime.GetHashCode();
    if (FadeOutTime != 0F) hash ^= FadeOutTime.GetHashCode();
    if (HoldTime != 0F) hash ^= HoldTime.GetHashCode();
    if (FxTime != 0F) hash ^= FxTime.GetHashCode();
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Channel != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Channel);
    }
    if (pos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Pos);
    }
    if (clr1_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Clr1);
    }
    if (clr2_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Clr2);
    }
    if (Effect != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(Effect);
    }
    if (FadeInTime != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(FadeInTime);
    }
    if (FadeOutTime != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(FadeOutTime);
    }
    if (HoldTime != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(HoldTime);
    }
    if (FxTime != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(FxTime);
    }
    if (Text.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(Text);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Channel != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Channel);
    }
    if (pos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pos);
    }
    if (clr1_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clr1);
    }
    if (clr2_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clr2);
    }
    if (Effect != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Effect);
    }
    if (FadeInTime != 0F) {
      size += 1 + 4;
    }
    if (FadeOutTime != 0F) {
      size += 1 + 4;
    }
    if (HoldTime != 0F) {
      size += 1 + 4;
    }
    if (FxTime != 0F) {
      size += 1 + 4;
    }
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_HudMsg other) {
    if (other == null) {
      return;
    }
    if (other.Channel != 0) {
      Channel = other.Channel;
    }
    if (other.pos_ != null) {
      if (pos_ == null) {
        pos_ = new global::CMsgVector2D();
      }
      Pos.MergeFrom(other.Pos);
    }
    if (other.clr1_ != null) {
      if (clr1_ == null) {
        clr1_ = new global::CMsgRGBA();
      }
      Clr1.MergeFrom(other.Clr1);
    }
    if (other.clr2_ != null) {
      if (clr2_ == null) {
        clr2_ = new global::CMsgRGBA();
      }
      Clr2.MergeFrom(other.Clr2);
    }
    if (other.Effect != 0) {
      Effect = other.Effect;
    }
    if (other.FadeInTime != 0F) {
      FadeInTime = other.FadeInTime;
    }
    if (other.FadeOutTime != 0F) {
      FadeOutTime = other.FadeOutTime;
    }
    if (other.HoldTime != 0F) {
      HoldTime = other.HoldTime;
    }
    if (other.FxTime != 0F) {
      FxTime = other.FxTime;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Channel = input.ReadInt32();
          break;
        }
        case 18: {
          if (pos_ == null) {
            pos_ = new global::CMsgVector2D();
          }
          input.ReadMessage(pos_);
          break;
        }
        case 26: {
          if (clr1_ == null) {
            clr1_ = new global::CMsgRGBA();
          }
          input.ReadMessage(clr1_);
          break;
        }
        case 34: {
          if (clr2_ == null) {
            clr2_ = new global::CMsgRGBA();
          }
          input.ReadMessage(clr2_);
          break;
        }
        case 40: {
          Effect = input.ReadInt32();
          break;
        }
        case 53: {
          FadeInTime = input.ReadFloat();
          break;
        }
        case 61: {
          FadeOutTime = input.ReadFloat();
          break;
        }
        case 77: {
          HoldTime = input.ReadFloat();
          break;
        }
        case 85: {
          FxTime = input.ReadFloat();
          break;
        }
        case 90: {
          Text = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Shake : pb::IMessage<CCSUsrMsg_Shake> {
  private static readonly pb::MessageParser<CCSUsrMsg_Shake> _parser = new pb::MessageParser<CCSUsrMsg_Shake>(() => new CCSUsrMsg_Shake());
  public static pb::MessageParser<CCSUsrMsg_Shake> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[8]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Shake() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Shake(CCSUsrMsg_Shake other) : this() {
    command_ = other.command_;
    localAmplitude_ = other.localAmplitude_;
    frequency_ = other.frequency_;
    duration_ = other.duration_;
  }

  public CCSUsrMsg_Shake Clone() {
    return new CCSUsrMsg_Shake(this);
  }

  public const int CommandFieldNumber = 1;
  private int command_;
  public int Command {
    get { return command_; }
    set {
      command_ = value;
    }
  }

  public const int LocalAmplitudeFieldNumber = 2;
  private float localAmplitude_;
  public float LocalAmplitude {
    get { return localAmplitude_; }
    set {
      localAmplitude_ = value;
    }
  }

  public const int FrequencyFieldNumber = 3;
  private float frequency_;
  public float Frequency {
    get { return frequency_; }
    set {
      frequency_ = value;
    }
  }

  public const int DurationFieldNumber = 4;
  private float duration_;
  public float Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Shake);
  }

  public bool Equals(CCSUsrMsg_Shake other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Command != other.Command) return false;
    if (LocalAmplitude != other.LocalAmplitude) return false;
    if (Frequency != other.Frequency) return false;
    if (Duration != other.Duration) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Command != 0) hash ^= Command.GetHashCode();
    if (LocalAmplitude != 0F) hash ^= LocalAmplitude.GetHashCode();
    if (Frequency != 0F) hash ^= Frequency.GetHashCode();
    if (Duration != 0F) hash ^= Duration.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Command != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Command);
    }
    if (LocalAmplitude != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(LocalAmplitude);
    }
    if (Frequency != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Frequency);
    }
    if (Duration != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Duration);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Command != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Command);
    }
    if (LocalAmplitude != 0F) {
      size += 1 + 4;
    }
    if (Frequency != 0F) {
      size += 1 + 4;
    }
    if (Duration != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Shake other) {
    if (other == null) {
      return;
    }
    if (other.Command != 0) {
      Command = other.Command;
    }
    if (other.LocalAmplitude != 0F) {
      LocalAmplitude = other.LocalAmplitude;
    }
    if (other.Frequency != 0F) {
      Frequency = other.Frequency;
    }
    if (other.Duration != 0F) {
      Duration = other.Duration;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Command = input.ReadInt32();
          break;
        }
        case 21: {
          LocalAmplitude = input.ReadFloat();
          break;
        }
        case 29: {
          Frequency = input.ReadFloat();
          break;
        }
        case 37: {
          Duration = input.ReadFloat();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Fade : pb::IMessage<CCSUsrMsg_Fade> {
  private static readonly pb::MessageParser<CCSUsrMsg_Fade> _parser = new pb::MessageParser<CCSUsrMsg_Fade>(() => new CCSUsrMsg_Fade());
  public static pb::MessageParser<CCSUsrMsg_Fade> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[9]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Fade() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Fade(CCSUsrMsg_Fade other) : this() {
    duration_ = other.duration_;
    holdTime_ = other.holdTime_;
    flags_ = other.flags_;
    Clr = other.clr_ != null ? other.Clr.Clone() : null;
  }

  public CCSUsrMsg_Fade Clone() {
    return new CCSUsrMsg_Fade(this);
  }

  public const int DurationFieldNumber = 1;
  private int duration_;
  public int Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  public const int HoldTimeFieldNumber = 2;
  private int holdTime_;
  public int HoldTime {
    get { return holdTime_; }
    set {
      holdTime_ = value;
    }
  }

  public const int FlagsFieldNumber = 3;
  private int flags_;
  public int Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  public const int ClrFieldNumber = 4;
  private global::CMsgRGBA clr_;
  public global::CMsgRGBA Clr {
    get { return clr_; }
    set {
      clr_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Fade);
  }

  public bool Equals(CCSUsrMsg_Fade other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Duration != other.Duration) return false;
    if (HoldTime != other.HoldTime) return false;
    if (Flags != other.Flags) return false;
    if (!object.Equals(Clr, other.Clr)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Duration != 0) hash ^= Duration.GetHashCode();
    if (HoldTime != 0) hash ^= HoldTime.GetHashCode();
    if (Flags != 0) hash ^= Flags.GetHashCode();
    if (clr_ != null) hash ^= Clr.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Duration != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Duration);
    }
    if (HoldTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(HoldTime);
    }
    if (Flags != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Flags);
    }
    if (clr_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Clr);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Duration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
    }
    if (HoldTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(HoldTime);
    }
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
    }
    if (clr_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Clr);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Fade other) {
    if (other == null) {
      return;
    }
    if (other.Duration != 0) {
      Duration = other.Duration;
    }
    if (other.HoldTime != 0) {
      HoldTime = other.HoldTime;
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
    if (other.clr_ != null) {
      if (clr_ == null) {
        clr_ = new global::CMsgRGBA();
      }
      Clr.MergeFrom(other.Clr);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Duration = input.ReadInt32();
          break;
        }
        case 16: {
          HoldTime = input.ReadInt32();
          break;
        }
        case 24: {
          Flags = input.ReadInt32();
          break;
        }
        case 34: {
          if (clr_ == null) {
            clr_ = new global::CMsgRGBA();
          }
          input.ReadMessage(clr_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Rumble : pb::IMessage<CCSUsrMsg_Rumble> {
  private static readonly pb::MessageParser<CCSUsrMsg_Rumble> _parser = new pb::MessageParser<CCSUsrMsg_Rumble>(() => new CCSUsrMsg_Rumble());
  public static pb::MessageParser<CCSUsrMsg_Rumble> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[10]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Rumble() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Rumble(CCSUsrMsg_Rumble other) : this() {
    index_ = other.index_;
    data_ = other.data_;
    flags_ = other.flags_;
  }

  public CCSUsrMsg_Rumble Clone() {
    return new CCSUsrMsg_Rumble(this);
  }

  public const int IndexFieldNumber = 1;
  private int index_;
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  public const int DataFieldNumber = 2;
  private int data_;
  public int Data {
    get { return data_; }
    set {
      data_ = value;
    }
  }

  public const int FlagsFieldNumber = 3;
  private int flags_;
  public int Flags {
    get { return flags_; }
    set {
      flags_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Rumble);
  }

  public bool Equals(CCSUsrMsg_Rumble other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Index != other.Index) return false;
    if (Data != other.Data) return false;
    if (Flags != other.Flags) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Data != 0) hash ^= Data.GetHashCode();
    if (Flags != 0) hash ^= Flags.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Index != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Index);
    }
    if (Data != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Data);
    }
    if (Flags != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(Flags);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Data != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Data);
    }
    if (Flags != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Flags);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Rumble other) {
    if (other == null) {
      return;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Data != 0) {
      Data = other.Data;
    }
    if (other.Flags != 0) {
      Flags = other.Flags;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Index = input.ReadInt32();
          break;
        }
        case 16: {
          Data = input.ReadInt32();
          break;
        }
        case 24: {
          Flags = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_CloseCaption : pb::IMessage<CCSUsrMsg_CloseCaption> {
  private static readonly pb::MessageParser<CCSUsrMsg_CloseCaption> _parser = new pb::MessageParser<CCSUsrMsg_CloseCaption>(() => new CCSUsrMsg_CloseCaption());
  public static pb::MessageParser<CCSUsrMsg_CloseCaption> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[11]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_CloseCaption() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_CloseCaption(CCSUsrMsg_CloseCaption other) : this() {
    hash_ = other.hash_;
    duration_ = other.duration_;
    fromPlayer_ = other.fromPlayer_;
  }

  public CCSUsrMsg_CloseCaption Clone() {
    return new CCSUsrMsg_CloseCaption(this);
  }

  public const int HashFieldNumber = 1;
  private uint hash_;
  public uint Hash {
    get { return hash_; }
    set {
      hash_ = value;
    }
  }

  public const int DurationFieldNumber = 2;
  private int duration_;
  public int Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  public const int FromPlayerFieldNumber = 3;
  private bool fromPlayer_;
  public bool FromPlayer {
    get { return fromPlayer_; }
    set {
      fromPlayer_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_CloseCaption);
  }

  public bool Equals(CCSUsrMsg_CloseCaption other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hash != other.Hash) return false;
    if (Duration != other.Duration) return false;
    if (FromPlayer != other.FromPlayer) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Hash != 0) hash ^= Hash.GetHashCode();
    if (Duration != 0) hash ^= Duration.GetHashCode();
    if (FromPlayer != false) hash ^= FromPlayer.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Hash != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Hash);
    }
    if (Duration != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Duration);
    }
    if (FromPlayer != false) {
      output.WriteRawTag(24);
      output.WriteBool(FromPlayer);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Hash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
    }
    if (Duration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
    }
    if (FromPlayer != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_CloseCaption other) {
    if (other == null) {
      return;
    }
    if (other.Hash != 0) {
      Hash = other.Hash;
    }
    if (other.Duration != 0) {
      Duration = other.Duration;
    }
    if (other.FromPlayer != false) {
      FromPlayer = other.FromPlayer;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Hash = input.ReadUInt32();
          break;
        }
        case 16: {
          Duration = input.ReadInt32();
          break;
        }
        case 24: {
          FromPlayer = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_CloseCaptionDirect : pb::IMessage<CCSUsrMsg_CloseCaptionDirect> {
  private static readonly pb::MessageParser<CCSUsrMsg_CloseCaptionDirect> _parser = new pb::MessageParser<CCSUsrMsg_CloseCaptionDirect>(() => new CCSUsrMsg_CloseCaptionDirect());
  public static pb::MessageParser<CCSUsrMsg_CloseCaptionDirect> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[12]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_CloseCaptionDirect() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_CloseCaptionDirect(CCSUsrMsg_CloseCaptionDirect other) : this() {
    hash_ = other.hash_;
    duration_ = other.duration_;
    fromPlayer_ = other.fromPlayer_;
  }

  public CCSUsrMsg_CloseCaptionDirect Clone() {
    return new CCSUsrMsg_CloseCaptionDirect(this);
  }

  public const int HashFieldNumber = 1;
  private uint hash_;
  public uint Hash {
    get { return hash_; }
    set {
      hash_ = value;
    }
  }

  public const int DurationFieldNumber = 2;
  private int duration_;
  public int Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  public const int FromPlayerFieldNumber = 3;
  private bool fromPlayer_;
  public bool FromPlayer {
    get { return fromPlayer_; }
    set {
      fromPlayer_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_CloseCaptionDirect);
  }

  public bool Equals(CCSUsrMsg_CloseCaptionDirect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Hash != other.Hash) return false;
    if (Duration != other.Duration) return false;
    if (FromPlayer != other.FromPlayer) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Hash != 0) hash ^= Hash.GetHashCode();
    if (Duration != 0) hash ^= Duration.GetHashCode();
    if (FromPlayer != false) hash ^= FromPlayer.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Hash != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Hash);
    }
    if (Duration != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Duration);
    }
    if (FromPlayer != false) {
      output.WriteRawTag(24);
      output.WriteBool(FromPlayer);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Hash != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hash);
    }
    if (Duration != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
    }
    if (FromPlayer != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_CloseCaptionDirect other) {
    if (other == null) {
      return;
    }
    if (other.Hash != 0) {
      Hash = other.Hash;
    }
    if (other.Duration != 0) {
      Duration = other.Duration;
    }
    if (other.FromPlayer != false) {
      FromPlayer = other.FromPlayer;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Hash = input.ReadUInt32();
          break;
        }
        case 16: {
          Duration = input.ReadInt32();
          break;
        }
        case 24: {
          FromPlayer = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_SendAudio : pb::IMessage<CCSUsrMsg_SendAudio> {
  private static readonly pb::MessageParser<CCSUsrMsg_SendAudio> _parser = new pb::MessageParser<CCSUsrMsg_SendAudio>(() => new CCSUsrMsg_SendAudio());
  public static pb::MessageParser<CCSUsrMsg_SendAudio> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[13]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_SendAudio() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_SendAudio(CCSUsrMsg_SendAudio other) : this() {
    radioSound_ = other.radioSound_;
  }

  public CCSUsrMsg_SendAudio Clone() {
    return new CCSUsrMsg_SendAudio(this);
  }

  public const int RadioSoundFieldNumber = 1;
  private string radioSound_ = "";
  public string RadioSound {
    get { return radioSound_; }
    set {
      radioSound_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_SendAudio);
  }

  public bool Equals(CCSUsrMsg_SendAudio other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RadioSound != other.RadioSound) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (RadioSound.Length != 0) hash ^= RadioSound.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (RadioSound.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RadioSound);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (RadioSound.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RadioSound);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_SendAudio other) {
    if (other == null) {
      return;
    }
    if (other.RadioSound.Length != 0) {
      RadioSound = other.RadioSound;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          RadioSound = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_RawAudio : pb::IMessage<CCSUsrMsg_RawAudio> {
  private static readonly pb::MessageParser<CCSUsrMsg_RawAudio> _parser = new pb::MessageParser<CCSUsrMsg_RawAudio>(() => new CCSUsrMsg_RawAudio());
  public static pb::MessageParser<CCSUsrMsg_RawAudio> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[14]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_RawAudio() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_RawAudio(CCSUsrMsg_RawAudio other) : this() {
    pitch_ = other.pitch_;
    entidx_ = other.entidx_;
    duration_ = other.duration_;
    voiceFilename_ = other.voiceFilename_;
  }

  public CCSUsrMsg_RawAudio Clone() {
    return new CCSUsrMsg_RawAudio(this);
  }

  public const int PitchFieldNumber = 1;
  private int pitch_;
  public int Pitch {
    get { return pitch_; }
    set {
      pitch_ = value;
    }
  }

  public const int EntidxFieldNumber = 2;
  private int entidx_;
  public int Entidx {
    get { return entidx_; }
    set {
      entidx_ = value;
    }
  }

  public const int DurationFieldNumber = 3;
  private float duration_;
  public float Duration {
    get { return duration_; }
    set {
      duration_ = value;
    }
  }

  public const int VoiceFilenameFieldNumber = 4;
  private string voiceFilename_ = "";
  public string VoiceFilename {
    get { return voiceFilename_; }
    set {
      voiceFilename_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_RawAudio);
  }

  public bool Equals(CCSUsrMsg_RawAudio other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Pitch != other.Pitch) return false;
    if (Entidx != other.Entidx) return false;
    if (Duration != other.Duration) return false;
    if (VoiceFilename != other.VoiceFilename) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Pitch != 0) hash ^= Pitch.GetHashCode();
    if (Entidx != 0) hash ^= Entidx.GetHashCode();
    if (Duration != 0F) hash ^= Duration.GetHashCode();
    if (VoiceFilename.Length != 0) hash ^= VoiceFilename.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Pitch != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Pitch);
    }
    if (Entidx != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Entidx);
    }
    if (Duration != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Duration);
    }
    if (VoiceFilename.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(VoiceFilename);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Pitch != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pitch);
    }
    if (Entidx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entidx);
    }
    if (Duration != 0F) {
      size += 1 + 4;
    }
    if (VoiceFilename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(VoiceFilename);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_RawAudio other) {
    if (other == null) {
      return;
    }
    if (other.Pitch != 0) {
      Pitch = other.Pitch;
    }
    if (other.Entidx != 0) {
      Entidx = other.Entidx;
    }
    if (other.Duration != 0F) {
      Duration = other.Duration;
    }
    if (other.VoiceFilename.Length != 0) {
      VoiceFilename = other.VoiceFilename;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Pitch = input.ReadInt32();
          break;
        }
        case 16: {
          Entidx = input.ReadInt32();
          break;
        }
        case 29: {
          Duration = input.ReadFloat();
          break;
        }
        case 34: {
          VoiceFilename = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VoiceMask : pb::IMessage<CCSUsrMsg_VoiceMask> {
  private static readonly pb::MessageParser<CCSUsrMsg_VoiceMask> _parser = new pb::MessageParser<CCSUsrMsg_VoiceMask>(() => new CCSUsrMsg_VoiceMask());
  public static pb::MessageParser<CCSUsrMsg_VoiceMask> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[15]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VoiceMask() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VoiceMask(CCSUsrMsg_VoiceMask other) : this() {
    playerMasks_ = other.playerMasks_.Clone();
    playerModEnable_ = other.playerModEnable_;
  }

  public CCSUsrMsg_VoiceMask Clone() {
    return new CCSUsrMsg_VoiceMask(this);
  }

  public const int PlayerMasksFieldNumber = 1;
  private static readonly pb::FieldCodec<global::CCSUsrMsg_VoiceMask.Types.PlayerMask> _repeated_playerMasks_codec
      = pb::FieldCodec.ForMessage(10, global::CCSUsrMsg_VoiceMask.Types.PlayerMask.Parser);
  private readonly pbc::RepeatedField<global::CCSUsrMsg_VoiceMask.Types.PlayerMask> playerMasks_ = new pbc::RepeatedField<global::CCSUsrMsg_VoiceMask.Types.PlayerMask>();
  public pbc::RepeatedField<global::CCSUsrMsg_VoiceMask.Types.PlayerMask> PlayerMasks {
    get { return playerMasks_; }
  }

  public const int PlayerModEnableFieldNumber = 2;
  private bool playerModEnable_;
  public bool PlayerModEnable {
    get { return playerModEnable_; }
    set {
      playerModEnable_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VoiceMask);
  }

  public bool Equals(CCSUsrMsg_VoiceMask other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!playerMasks_.Equals(other.playerMasks_)) return false;
    if (PlayerModEnable != other.PlayerModEnable) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= playerMasks_.GetHashCode();
    if (PlayerModEnable != false) hash ^= PlayerModEnable.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    playerMasks_.WriteTo(output, _repeated_playerMasks_codec);
    if (PlayerModEnable != false) {
      output.WriteRawTag(16);
      output.WriteBool(PlayerModEnable);
    }
  }

  public int CalculateSize() {
    int size = 0;
    size += playerMasks_.CalculateSize(_repeated_playerMasks_codec);
    if (PlayerModEnable != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VoiceMask other) {
    if (other == null) {
      return;
    }
    playerMasks_.Add(other.playerMasks_);
    if (other.PlayerModEnable != false) {
      PlayerModEnable = other.PlayerModEnable;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          playerMasks_.AddEntriesFrom(input, _repeated_playerMasks_codec);
          break;
        }
        case 16: {
          PlayerModEnable = input.ReadBool();
          break;
        }
      }
    }
  }

  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PlayerMask : pb::IMessage<PlayerMask> {
      private static readonly pb::MessageParser<PlayerMask> _parser = new pb::MessageParser<PlayerMask>(() => new PlayerMask());
      public static pb::MessageParser<PlayerMask> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::CCSUsrMsg_VoiceMask.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public PlayerMask() {
        OnConstruction();
      }

      partial void OnConstruction();

      public PlayerMask(PlayerMask other) : this() {
        gameRulesMask_ = other.gameRulesMask_;
        banMasks_ = other.banMasks_;
      }

      public PlayerMask Clone() {
        return new PlayerMask(this);
      }

      public const int GameRulesMaskFieldNumber = 1;
      private int gameRulesMask_;
      public int GameRulesMask {
        get { return gameRulesMask_; }
        set {
          gameRulesMask_ = value;
        }
      }

      public const int BanMasksFieldNumber = 2;
      private int banMasks_;
      public int BanMasks {
        get { return banMasks_; }
        set {
          banMasks_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as PlayerMask);
      }

      public bool Equals(PlayerMask other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (GameRulesMask != other.GameRulesMask) return false;
        if (BanMasks != other.BanMasks) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (GameRulesMask != 0) hash ^= GameRulesMask.GetHashCode();
        if (BanMasks != 0) hash ^= BanMasks.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.Default.Format(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (GameRulesMask != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(GameRulesMask);
        }
        if (BanMasks != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(BanMasks);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (GameRulesMask != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameRulesMask);
        }
        if (BanMasks != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(BanMasks);
        }
        return size;
      }

      public void MergeFrom(PlayerMask other) {
        if (other == null) {
          return;
        }
        if (other.GameRulesMask != 0) {
          GameRulesMask = other.GameRulesMask;
        }
        if (other.BanMasks != 0) {
          BanMasks = other.BanMasks;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              GameRulesMask = input.ReadInt32();
              break;
            }
            case 16: {
              BanMasks = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_Damage : pb::IMessage<CCSUsrMsg_Damage> {
  private static readonly pb::MessageParser<CCSUsrMsg_Damage> _parser = new pb::MessageParser<CCSUsrMsg_Damage>(() => new CCSUsrMsg_Damage());
  public static pb::MessageParser<CCSUsrMsg_Damage> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[16]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_Damage() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_Damage(CCSUsrMsg_Damage other) : this() {
    amount_ = other.amount_;
    InflictorWorldPos = other.inflictorWorldPos_ != null ? other.InflictorWorldPos.Clone() : null;
  }

  public CCSUsrMsg_Damage Clone() {
    return new CCSUsrMsg_Damage(this);
  }

  public const int AmountFieldNumber = 1;
  private int amount_;
  public int Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  public const int InflictorWorldPosFieldNumber = 2;
  private global::CMsgVector inflictorWorldPos_;
  public global::CMsgVector InflictorWorldPos {
    get { return inflictorWorldPos_; }
    set {
      inflictorWorldPos_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_Damage);
  }

  public bool Equals(CCSUsrMsg_Damage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Amount != other.Amount) return false;
    if (!object.Equals(InflictorWorldPos, other.InflictorWorldPos)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Amount != 0) hash ^= Amount.GetHashCode();
    if (inflictorWorldPos_ != null) hash ^= InflictorWorldPos.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Amount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Amount);
    }
    if (inflictorWorldPos_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(InflictorWorldPos);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Amount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (inflictorWorldPos_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(InflictorWorldPos);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_Damage other) {
    if (other == null) {
      return;
    }
    if (other.Amount != 0) {
      Amount = other.Amount;
    }
    if (other.inflictorWorldPos_ != null) {
      if (inflictorWorldPos_ == null) {
        inflictorWorldPos_ = new global::CMsgVector();
      }
      InflictorWorldPos.MergeFrom(other.InflictorWorldPos);
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Amount = input.ReadInt32();
          break;
        }
        case 18: {
          if (inflictorWorldPos_ == null) {
            inflictorWorldPos_ = new global::CMsgVector();
          }
          input.ReadMessage(inflictorWorldPos_);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_RadioText : pb::IMessage<CCSUsrMsg_RadioText> {
  private static readonly pb::MessageParser<CCSUsrMsg_RadioText> _parser = new pb::MessageParser<CCSUsrMsg_RadioText>(() => new CCSUsrMsg_RadioText());
  public static pb::MessageParser<CCSUsrMsg_RadioText> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[17]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_RadioText() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_RadioText(CCSUsrMsg_RadioText other) : this() {
    msgDst_ = other.msgDst_;
    client_ = other.client_;
    msgName_ = other.msgName_;
    params_ = other.params_.Clone();
  }

  public CCSUsrMsg_RadioText Clone() {
    return new CCSUsrMsg_RadioText(this);
  }

  public const int MsgDstFieldNumber = 1;
  private int msgDst_;
  public int MsgDst {
    get { return msgDst_; }
    set {
      msgDst_ = value;
    }
  }

  public const int ClientFieldNumber = 2;
  private int client_;
  public int Client {
    get { return client_; }
    set {
      client_ = value;
    }
  }

  public const int MsgNameFieldNumber = 3;
  private string msgName_ = "";
  public string MsgName {
    get { return msgName_; }
    set {
      msgName_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int ParamsFieldNumber = 4;
  private static readonly pb::FieldCodec<string> _repeated_params_codec
      = pb::FieldCodec.ForString(34);
  private readonly pbc::RepeatedField<string> params_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Params {
    get { return params_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_RadioText);
  }

  public bool Equals(CCSUsrMsg_RadioText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MsgDst != other.MsgDst) return false;
    if (Client != other.Client) return false;
    if (MsgName != other.MsgName) return false;
    if(!params_.Equals(other.params_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (MsgDst != 0) hash ^= MsgDst.GetHashCode();
    if (Client != 0) hash ^= Client.GetHashCode();
    if (MsgName.Length != 0) hash ^= MsgName.GetHashCode();
    hash ^= params_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (MsgDst != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(MsgDst);
    }
    if (Client != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Client);
    }
    if (MsgName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MsgName);
    }
    params_.WriteTo(output, _repeated_params_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (MsgDst != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MsgDst);
    }
    if (Client != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Client);
    }
    if (MsgName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MsgName);
    }
    size += params_.CalculateSize(_repeated_params_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_RadioText other) {
    if (other == null) {
      return;
    }
    if (other.MsgDst != 0) {
      MsgDst = other.MsgDst;
    }
    if (other.Client != 0) {
      Client = other.Client;
    }
    if (other.MsgName.Length != 0) {
      MsgName = other.MsgName;
    }
    params_.Add(other.params_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          MsgDst = input.ReadInt32();
          break;
        }
        case 16: {
          Client = input.ReadInt32();
          break;
        }
        case 26: {
          MsgName = input.ReadString();
          break;
        }
        case 34: {
          params_.AddEntriesFrom(input, _repeated_params_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_HintText : pb::IMessage<CCSUsrMsg_HintText> {
  private static readonly pb::MessageParser<CCSUsrMsg_HintText> _parser = new pb::MessageParser<CCSUsrMsg_HintText>(() => new CCSUsrMsg_HintText());
  public static pb::MessageParser<CCSUsrMsg_HintText> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[18]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_HintText() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_HintText(CCSUsrMsg_HintText other) : this() {
    text_ = other.text_;
  }

  public CCSUsrMsg_HintText Clone() {
    return new CCSUsrMsg_HintText(this);
  }

  public const int TextFieldNumber = 1;
  private string text_ = "";
  public string Text {
    get { return text_; }
    set {
      text_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_HintText);
  }

  public bool Equals(CCSUsrMsg_HintText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Text != other.Text) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Text.Length != 0) hash ^= Text.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Text.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Text);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Text.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_HintText other) {
    if (other == null) {
      return;
    }
    if (other.Text.Length != 0) {
      Text = other.Text;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Text = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_KeyHintText : pb::IMessage<CCSUsrMsg_KeyHintText> {
  private static readonly pb::MessageParser<CCSUsrMsg_KeyHintText> _parser = new pb::MessageParser<CCSUsrMsg_KeyHintText>(() => new CCSUsrMsg_KeyHintText());
  public static pb::MessageParser<CCSUsrMsg_KeyHintText> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[19]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_KeyHintText() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_KeyHintText(CCSUsrMsg_KeyHintText other) : this() {
    hints_ = other.hints_.Clone();
  }

  public CCSUsrMsg_KeyHintText Clone() {
    return new CCSUsrMsg_KeyHintText(this);
  }

  public const int HintsFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_hints_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> hints_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> Hints {
    get { return hints_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_KeyHintText);
  }

  public bool Equals(CCSUsrMsg_KeyHintText other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!hints_.Equals(other.hints_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= hints_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    hints_.WriteTo(output, _repeated_hints_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += hints_.CalculateSize(_repeated_hints_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_KeyHintText other) {
    if (other == null) {
      return;
    }
    hints_.Add(other.hints_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          hints_.AddEntriesFrom(input, _repeated_hints_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ProcessSpottedEntityUpdate : pb::IMessage<CCSUsrMsg_ProcessSpottedEntityUpdate> {
  private static readonly pb::MessageParser<CCSUsrMsg_ProcessSpottedEntityUpdate> _parser = new pb::MessageParser<CCSUsrMsg_ProcessSpottedEntityUpdate>(() => new CCSUsrMsg_ProcessSpottedEntityUpdate());
  public static pb::MessageParser<CCSUsrMsg_ProcessSpottedEntityUpdate> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[20]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ProcessSpottedEntityUpdate() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ProcessSpottedEntityUpdate(CCSUsrMsg_ProcessSpottedEntityUpdate other) : this() {
    newUpdate_ = other.newUpdate_;
    entityUpdates_ = other.entityUpdates_.Clone();
  }

  public CCSUsrMsg_ProcessSpottedEntityUpdate Clone() {
    return new CCSUsrMsg_ProcessSpottedEntityUpdate(this);
  }

  public const int NewUpdateFieldNumber = 1;
  private bool newUpdate_;
  public bool NewUpdate {
    get { return newUpdate_; }
    set {
      newUpdate_ = value;
    }
  }

  public const int EntityUpdatesFieldNumber = 2;
  private static readonly pb::FieldCodec<global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate> _repeated_entityUpdates_codec
      = pb::FieldCodec.ForMessage(18, global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate.Parser);
  private readonly pbc::RepeatedField<global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate> entityUpdates_ = new pbc::RepeatedField<global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate>();
  public pbc::RepeatedField<global::CCSUsrMsg_ProcessSpottedEntityUpdate.Types.SpottedEntityUpdate> EntityUpdates {
    get { return entityUpdates_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ProcessSpottedEntityUpdate);
  }

  public bool Equals(CCSUsrMsg_ProcessSpottedEntityUpdate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NewUpdate != other.NewUpdate) return false;
    if(!entityUpdates_.Equals(other.entityUpdates_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (NewUpdate != false) hash ^= NewUpdate.GetHashCode();
    hash ^= entityUpdates_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (NewUpdate != false) {
      output.WriteRawTag(8);
      output.WriteBool(NewUpdate);
    }
    entityUpdates_.WriteTo(output, _repeated_entityUpdates_codec);
  }

  public int CalculateSize() {
    int size = 0;
    if (NewUpdate != false) {
      size += 1 + 1;
    }
    size += entityUpdates_.CalculateSize(_repeated_entityUpdates_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ProcessSpottedEntityUpdate other) {
    if (other == null) {
      return;
    }
    if (other.NewUpdate != false) {
      NewUpdate = other.NewUpdate;
    }
    entityUpdates_.Add(other.entityUpdates_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NewUpdate = input.ReadBool();
          break;
        }
        case 18: {
          entityUpdates_.AddEntriesFrom(input, _repeated_entityUpdates_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class SpottedEntityUpdate : pb::IMessage<SpottedEntityUpdate> {
      private static readonly pb::MessageParser<SpottedEntityUpdate> _parser = new pb::MessageParser<SpottedEntityUpdate>(() => new SpottedEntityUpdate());
      public static pb::MessageParser<SpottedEntityUpdate> Parser { get { return _parser; } }

      public static pbr::MessageDescriptor Descriptor {
        get { return global::CCSUsrMsg_ProcessSpottedEntityUpdate.Descriptor.NestedTypes[0]; }
      }

      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      public SpottedEntityUpdate() {
        OnConstruction();
      }

      partial void OnConstruction();

      public SpottedEntityUpdate(SpottedEntityUpdate other) : this() {
        entityIdx_ = other.entityIdx_;
        classId_ = other.classId_;
        originX_ = other.originX_;
        originY_ = other.originY_;
        originZ_ = other.originZ_;
        angleY_ = other.angleY_;
        defuser_ = other.defuser_;
        playerHasDefuser_ = other.playerHasDefuser_;
        playerHasC4_ = other.playerHasC4_;
      }

      public SpottedEntityUpdate Clone() {
        return new SpottedEntityUpdate(this);
      }

      public const int EntityIdxFieldNumber = 1;
      private int entityIdx_;
      public int EntityIdx {
        get { return entityIdx_; }
        set {
          entityIdx_ = value;
        }
      }

      public const int ClassIdFieldNumber = 2;
      private int classId_;
      public int ClassId {
        get { return classId_; }
        set {
          classId_ = value;
        }
      }

      public const int OriginXFieldNumber = 3;
      private int originX_;
      public int OriginX {
        get { return originX_; }
        set {
          originX_ = value;
        }
      }

      public const int OriginYFieldNumber = 4;
      private int originY_;
      public int OriginY {
        get { return originY_; }
        set {
          originY_ = value;
        }
      }

      public const int OriginZFieldNumber = 5;
      private int originZ_;
      public int OriginZ {
        get { return originZ_; }
        set {
          originZ_ = value;
        }
      }

      public const int AngleYFieldNumber = 6;
      private int angleY_;
      public int AngleY {
        get { return angleY_; }
        set {
          angleY_ = value;
        }
      }

      public const int DefuserFieldNumber = 7;
      private bool defuser_;
      public bool Defuser {
        get { return defuser_; }
        set {
          defuser_ = value;
        }
      }

      public const int PlayerHasDefuserFieldNumber = 8;
      private bool playerHasDefuser_;
      public bool PlayerHasDefuser {
        get { return playerHasDefuser_; }
        set {
          playerHasDefuser_ = value;
        }
      }

      public const int PlayerHasC4FieldNumber = 9;
      private bool playerHasC4_;
      public bool PlayerHasC4 {
        get { return playerHasC4_; }
        set {
          playerHasC4_ = value;
        }
      }

      public override bool Equals(object other) {
        return Equals(other as SpottedEntityUpdate);
      }

      public bool Equals(SpottedEntityUpdate other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (EntityIdx != other.EntityIdx) return false;
        if (ClassId != other.ClassId) return false;
        if (OriginX != other.OriginX) return false;
        if (OriginY != other.OriginY) return false;
        if (OriginZ != other.OriginZ) return false;
        if (AngleY != other.AngleY) return false;
        if (Defuser != other.Defuser) return false;
        if (PlayerHasDefuser != other.PlayerHasDefuser) return false;
        if (PlayerHasC4 != other.PlayerHasC4) return false;
        return true;
      }

      public override int GetHashCode() {
        int hash = 1;
        if (EntityIdx != 0) hash ^= EntityIdx.GetHashCode();
        if (ClassId != 0) hash ^= ClassId.GetHashCode();
        if (OriginX != 0) hash ^= OriginX.GetHashCode();
        if (OriginY != 0) hash ^= OriginY.GetHashCode();
        if (OriginZ != 0) hash ^= OriginZ.GetHashCode();
        if (AngleY != 0) hash ^= AngleY.GetHashCode();
        if (Defuser != false) hash ^= Defuser.GetHashCode();
        if (PlayerHasDefuser != false) hash ^= PlayerHasDefuser.GetHashCode();
        if (PlayerHasC4 != false) hash ^= PlayerHasC4.GetHashCode();
        return hash;
      }

      public override string ToString() {
        return pb::JsonFormatter.Default.Format(this);
      }

      public void WriteTo(pb::CodedOutputStream output) {
        if (EntityIdx != 0) {
          output.WriteRawTag(8);
          output.WriteInt32(EntityIdx);
        }
        if (ClassId != 0) {
          output.WriteRawTag(16);
          output.WriteInt32(ClassId);
        }
        if (OriginX != 0) {
          output.WriteRawTag(24);
          output.WriteInt32(OriginX);
        }
        if (OriginY != 0) {
          output.WriteRawTag(32);
          output.WriteInt32(OriginY);
        }
        if (OriginZ != 0) {
          output.WriteRawTag(40);
          output.WriteInt32(OriginZ);
        }
        if (AngleY != 0) {
          output.WriteRawTag(48);
          output.WriteInt32(AngleY);
        }
        if (Defuser != false) {
          output.WriteRawTag(56);
          output.WriteBool(Defuser);
        }
        if (PlayerHasDefuser != false) {
          output.WriteRawTag(64);
          output.WriteBool(PlayerHasDefuser);
        }
        if (PlayerHasC4 != false) {
          output.WriteRawTag(72);
          output.WriteBool(PlayerHasC4);
        }
      }

      public int CalculateSize() {
        int size = 0;
        if (EntityIdx != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntityIdx);
        }
        if (ClassId != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClassId);
        }
        if (OriginX != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginX);
        }
        if (OriginY != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginY);
        }
        if (OriginZ != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(OriginZ);
        }
        if (AngleY != 0) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(AngleY);
        }
        if (Defuser != false) {
          size += 1 + 1;
        }
        if (PlayerHasDefuser != false) {
          size += 1 + 1;
        }
        if (PlayerHasC4 != false) {
          size += 1 + 1;
        }
        return size;
      }

      public void MergeFrom(SpottedEntityUpdate other) {
        if (other == null) {
          return;
        }
        if (other.EntityIdx != 0) {
          EntityIdx = other.EntityIdx;
        }
        if (other.ClassId != 0) {
          ClassId = other.ClassId;
        }
        if (other.OriginX != 0) {
          OriginX = other.OriginX;
        }
        if (other.OriginY != 0) {
          OriginY = other.OriginY;
        }
        if (other.OriginZ != 0) {
          OriginZ = other.OriginZ;
        }
        if (other.AngleY != 0) {
          AngleY = other.AngleY;
        }
        if (other.Defuser != false) {
          Defuser = other.Defuser;
        }
        if (other.PlayerHasDefuser != false) {
          PlayerHasDefuser = other.PlayerHasDefuser;
        }
        if (other.PlayerHasC4 != false) {
          PlayerHasC4 = other.PlayerHasC4;
        }
      }

      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 8: {
              EntityIdx = input.ReadInt32();
              break;
            }
            case 16: {
              ClassId = input.ReadInt32();
              break;
            }
            case 24: {
              OriginX = input.ReadInt32();
              break;
            }
            case 32: {
              OriginY = input.ReadInt32();
              break;
            }
            case 40: {
              OriginZ = input.ReadInt32();
              break;
            }
            case 48: {
              AngleY = input.ReadInt32();
              break;
            }
            case 56: {
              Defuser = input.ReadBool();
              break;
            }
            case 64: {
              PlayerHasDefuser = input.ReadBool();
              break;
            }
            case 72: {
              PlayerHasC4 = input.ReadBool();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ReloadEffect : pb::IMessage<CCSUsrMsg_ReloadEffect> {
  private static readonly pb::MessageParser<CCSUsrMsg_ReloadEffect> _parser = new pb::MessageParser<CCSUsrMsg_ReloadEffect>(() => new CCSUsrMsg_ReloadEffect());
  public static pb::MessageParser<CCSUsrMsg_ReloadEffect> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[21]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ReloadEffect() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ReloadEffect(CCSUsrMsg_ReloadEffect other) : this() {
    entidx_ = other.entidx_;
    actanim_ = other.actanim_;
  }

  public CCSUsrMsg_ReloadEffect Clone() {
    return new CCSUsrMsg_ReloadEffect(this);
  }

  public const int EntidxFieldNumber = 1;
  private int entidx_;
  public int Entidx {
    get { return entidx_; }
    set {
      entidx_ = value;
    }
  }

  public const int ActanimFieldNumber = 2;
  private int actanim_;
  public int Actanim {
    get { return actanim_; }
    set {
      actanim_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ReloadEffect);
  }

  public bool Equals(CCSUsrMsg_ReloadEffect other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Entidx != other.Entidx) return false;
    if (Actanim != other.Actanim) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Entidx != 0) hash ^= Entidx.GetHashCode();
    if (Actanim != 0) hash ^= Actanim.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Entidx != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Entidx);
    }
    if (Actanim != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Actanim);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Entidx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entidx);
    }
    if (Actanim != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Actanim);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ReloadEffect other) {
    if (other == null) {
      return;
    }
    if (other.Entidx != 0) {
      Entidx = other.Entidx;
    }
    if (other.Actanim != 0) {
      Actanim = other.Actanim;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Entidx = input.ReadInt32();
          break;
        }
        case 16: {
          Actanim = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_AdjustMoney : pb::IMessage<CCSUsrMsg_AdjustMoney> {
  private static readonly pb::MessageParser<CCSUsrMsg_AdjustMoney> _parser = new pb::MessageParser<CCSUsrMsg_AdjustMoney>(() => new CCSUsrMsg_AdjustMoney());
  public static pb::MessageParser<CCSUsrMsg_AdjustMoney> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[22]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_AdjustMoney() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_AdjustMoney(CCSUsrMsg_AdjustMoney other) : this() {
    amount_ = other.amount_;
  }

  public CCSUsrMsg_AdjustMoney Clone() {
    return new CCSUsrMsg_AdjustMoney(this);
  }

  public const int AmountFieldNumber = 1;
  private int amount_;
  public int Amount {
    get { return amount_; }
    set {
      amount_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_AdjustMoney);
  }

  public bool Equals(CCSUsrMsg_AdjustMoney other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Amount != other.Amount) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Amount != 0) hash ^= Amount.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Amount != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Amount);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Amount != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_AdjustMoney other) {
    if (other == null) {
      return;
    }
    if (other.Amount != 0) {
      Amount = other.Amount;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Amount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_KillCam : pb::IMessage<CCSUsrMsg_KillCam> {
  private static readonly pb::MessageParser<CCSUsrMsg_KillCam> _parser = new pb::MessageParser<CCSUsrMsg_KillCam>(() => new CCSUsrMsg_KillCam());
  public static pb::MessageParser<CCSUsrMsg_KillCam> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[23]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_KillCam() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_KillCam(CCSUsrMsg_KillCam other) : this() {
    obsMode_ = other.obsMode_;
    firstTarget_ = other.firstTarget_;
    secondTarget_ = other.secondTarget_;
  }

  public CCSUsrMsg_KillCam Clone() {
    return new CCSUsrMsg_KillCam(this);
  }

  public const int ObsModeFieldNumber = 1;
  private int obsMode_;
  public int ObsMode {
    get { return obsMode_; }
    set {
      obsMode_ = value;
    }
  }

  public const int FirstTargetFieldNumber = 2;
  private int firstTarget_;
  public int FirstTarget {
    get { return firstTarget_; }
    set {
      firstTarget_ = value;
    }
  }

  public const int SecondTargetFieldNumber = 3;
  private int secondTarget_;
  public int SecondTarget {
    get { return secondTarget_; }
    set {
      secondTarget_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_KillCam);
  }

  public bool Equals(CCSUsrMsg_KillCam other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ObsMode != other.ObsMode) return false;
    if (FirstTarget != other.FirstTarget) return false;
    if (SecondTarget != other.SecondTarget) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (ObsMode != 0) hash ^= ObsMode.GetHashCode();
    if (FirstTarget != 0) hash ^= FirstTarget.GetHashCode();
    if (SecondTarget != 0) hash ^= SecondTarget.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (ObsMode != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(ObsMode);
    }
    if (FirstTarget != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(FirstTarget);
    }
    if (SecondTarget != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(SecondTarget);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (ObsMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ObsMode);
    }
    if (FirstTarget != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstTarget);
    }
    if (SecondTarget != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondTarget);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_KillCam other) {
    if (other == null) {
      return;
    }
    if (other.ObsMode != 0) {
      ObsMode = other.ObsMode;
    }
    if (other.FirstTarget != 0) {
      FirstTarget = other.FirstTarget;
    }
    if (other.SecondTarget != 0) {
      SecondTarget = other.SecondTarget;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          ObsMode = input.ReadInt32();
          break;
        }
        case 16: {
          FirstTarget = input.ReadInt32();
          break;
        }
        case 24: {
          SecondTarget = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_DesiredTimescale : pb::IMessage<CCSUsrMsg_DesiredTimescale> {
  private static readonly pb::MessageParser<CCSUsrMsg_DesiredTimescale> _parser = new pb::MessageParser<CCSUsrMsg_DesiredTimescale>(() => new CCSUsrMsg_DesiredTimescale());
  public static pb::MessageParser<CCSUsrMsg_DesiredTimescale> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[24]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_DesiredTimescale() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_DesiredTimescale(CCSUsrMsg_DesiredTimescale other) : this() {
    desiredTimescale_ = other.desiredTimescale_;
    durationRealtimeSec_ = other.durationRealtimeSec_;
    interpolatorType_ = other.interpolatorType_;
    startBlendTime_ = other.startBlendTime_;
  }

  public CCSUsrMsg_DesiredTimescale Clone() {
    return new CCSUsrMsg_DesiredTimescale(this);
  }

  public const int DesiredTimescaleFieldNumber = 1;
  private float desiredTimescale_;
  public float DesiredTimescale {
    get { return desiredTimescale_; }
    set {
      desiredTimescale_ = value;
    }
  }

  public const int DurationRealtimeSecFieldNumber = 2;
  private float durationRealtimeSec_;
  public float DurationRealtimeSec {
    get { return durationRealtimeSec_; }
    set {
      durationRealtimeSec_ = value;
    }
  }

  public const int InterpolatorTypeFieldNumber = 3;
  private int interpolatorType_;
  public int InterpolatorType {
    get { return interpolatorType_; }
    set {
      interpolatorType_ = value;
    }
  }

  public const int StartBlendTimeFieldNumber = 4;
  private float startBlendTime_;
  public float StartBlendTime {
    get { return startBlendTime_; }
    set {
      startBlendTime_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_DesiredTimescale);
  }

  public bool Equals(CCSUsrMsg_DesiredTimescale other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DesiredTimescale != other.DesiredTimescale) return false;
    if (DurationRealtimeSec != other.DurationRealtimeSec) return false;
    if (InterpolatorType != other.InterpolatorType) return false;
    if (StartBlendTime != other.StartBlendTime) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (DesiredTimescale != 0F) hash ^= DesiredTimescale.GetHashCode();
    if (DurationRealtimeSec != 0F) hash ^= DurationRealtimeSec.GetHashCode();
    if (InterpolatorType != 0) hash ^= InterpolatorType.GetHashCode();
    if (StartBlendTime != 0F) hash ^= StartBlendTime.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (DesiredTimescale != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(DesiredTimescale);
    }
    if (DurationRealtimeSec != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(DurationRealtimeSec);
    }
    if (InterpolatorType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(InterpolatorType);
    }
    if (StartBlendTime != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(StartBlendTime);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (DesiredTimescale != 0F) {
      size += 1 + 4;
    }
    if (DurationRealtimeSec != 0F) {
      size += 1 + 4;
    }
    if (InterpolatorType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(InterpolatorType);
    }
    if (StartBlendTime != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_DesiredTimescale other) {
    if (other == null) {
      return;
    }
    if (other.DesiredTimescale != 0F) {
      DesiredTimescale = other.DesiredTimescale;
    }
    if (other.DurationRealtimeSec != 0F) {
      DurationRealtimeSec = other.DurationRealtimeSec;
    }
    if (other.InterpolatorType != 0) {
      InterpolatorType = other.InterpolatorType;
    }
    if (other.StartBlendTime != 0F) {
      StartBlendTime = other.StartBlendTime;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          DesiredTimescale = input.ReadFloat();
          break;
        }
        case 21: {
          DurationRealtimeSec = input.ReadFloat();
          break;
        }
        case 24: {
          InterpolatorType = input.ReadInt32();
          break;
        }
        case 37: {
          StartBlendTime = input.ReadFloat();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_CurrentTimescale : pb::IMessage<CCSUsrMsg_CurrentTimescale> {
  private static readonly pb::MessageParser<CCSUsrMsg_CurrentTimescale> _parser = new pb::MessageParser<CCSUsrMsg_CurrentTimescale>(() => new CCSUsrMsg_CurrentTimescale());
  public static pb::MessageParser<CCSUsrMsg_CurrentTimescale> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[25]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_CurrentTimescale() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_CurrentTimescale(CCSUsrMsg_CurrentTimescale other) : this() {
    curTimescale_ = other.curTimescale_;
  }

  public CCSUsrMsg_CurrentTimescale Clone() {
    return new CCSUsrMsg_CurrentTimescale(this);
  }

  public const int CurTimescaleFieldNumber = 1;
  private float curTimescale_;
  public float CurTimescale {
    get { return curTimescale_; }
    set {
      curTimescale_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_CurrentTimescale);
  }

  public bool Equals(CCSUsrMsg_CurrentTimescale other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurTimescale != other.CurTimescale) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (CurTimescale != 0F) hash ^= CurTimescale.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (CurTimescale != 0F) {
      output.WriteRawTag(13);
      output.WriteFloat(CurTimescale);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (CurTimescale != 0F) {
      size += 1 + 4;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_CurrentTimescale other) {
    if (other == null) {
      return;
    }
    if (other.CurTimescale != 0F) {
      CurTimescale = other.CurTimescale;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 13: {
          CurTimescale = input.ReadFloat();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_AchievementEvent : pb::IMessage<CCSUsrMsg_AchievementEvent> {
  private static readonly pb::MessageParser<CCSUsrMsg_AchievementEvent> _parser = new pb::MessageParser<CCSUsrMsg_AchievementEvent>(() => new CCSUsrMsg_AchievementEvent());
  public static pb::MessageParser<CCSUsrMsg_AchievementEvent> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[26]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_AchievementEvent() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_AchievementEvent(CCSUsrMsg_AchievementEvent other) : this() {
    achievement_ = other.achievement_;
    count_ = other.count_;
    userId_ = other.userId_;
  }

  public CCSUsrMsg_AchievementEvent Clone() {
    return new CCSUsrMsg_AchievementEvent(this);
  }

  public const int AchievementFieldNumber = 1;
  private int achievement_;
  public int Achievement {
    get { return achievement_; }
    set {
      achievement_ = value;
    }
  }

  public const int CountFieldNumber = 2;
  private int count_;
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  public const int UserIdFieldNumber = 3;
  private int userId_;
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_AchievementEvent);
  }

  public bool Equals(CCSUsrMsg_AchievementEvent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Achievement != other.Achievement) return false;
    if (Count != other.Count) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Achievement != 0) hash ^= Achievement.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Achievement != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Achievement);
    }
    if (Count != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Count);
    }
    if (UserId != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(UserId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Achievement != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Achievement);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_AchievementEvent other) {
    if (other == null) {
      return;
    }
    if (other.Achievement != 0) {
      Achievement = other.Achievement;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Achievement = input.ReadInt32();
          break;
        }
        case 16: {
          Count = input.ReadInt32();
          break;
        }
        case 24: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_MatchEndConditions : pb::IMessage<CCSUsrMsg_MatchEndConditions> {
  private static readonly pb::MessageParser<CCSUsrMsg_MatchEndConditions> _parser = new pb::MessageParser<CCSUsrMsg_MatchEndConditions>(() => new CCSUsrMsg_MatchEndConditions());
  public static pb::MessageParser<CCSUsrMsg_MatchEndConditions> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[27]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_MatchEndConditions() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_MatchEndConditions(CCSUsrMsg_MatchEndConditions other) : this() {
    fraglimit_ = other.fraglimit_;
    mpMaxrounds_ = other.mpMaxrounds_;
    mpWinlimit_ = other.mpWinlimit_;
    mpTimelimit_ = other.mpTimelimit_;
  }

  public CCSUsrMsg_MatchEndConditions Clone() {
    return new CCSUsrMsg_MatchEndConditions(this);
  }

  public const int FraglimitFieldNumber = 1;
  private int fraglimit_;
  public int Fraglimit {
    get { return fraglimit_; }
    set {
      fraglimit_ = value;
    }
  }

  public const int MpMaxroundsFieldNumber = 2;
  private int mpMaxrounds_;
  public int MpMaxrounds {
    get { return mpMaxrounds_; }
    set {
      mpMaxrounds_ = value;
    }
  }

  public const int MpWinlimitFieldNumber = 3;
  private int mpWinlimit_;
  public int MpWinlimit {
    get { return mpWinlimit_; }
    set {
      mpWinlimit_ = value;
    }
  }

  public const int MpTimelimitFieldNumber = 4;
  private int mpTimelimit_;
  public int MpTimelimit {
    get { return mpTimelimit_; }
    set {
      mpTimelimit_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_MatchEndConditions);
  }

  public bool Equals(CCSUsrMsg_MatchEndConditions other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Fraglimit != other.Fraglimit) return false;
    if (MpMaxrounds != other.MpMaxrounds) return false;
    if (MpWinlimit != other.MpWinlimit) return false;
    if (MpTimelimit != other.MpTimelimit) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Fraglimit != 0) hash ^= Fraglimit.GetHashCode();
    if (MpMaxrounds != 0) hash ^= MpMaxrounds.GetHashCode();
    if (MpWinlimit != 0) hash ^= MpWinlimit.GetHashCode();
    if (MpTimelimit != 0) hash ^= MpTimelimit.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Fraglimit != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Fraglimit);
    }
    if (MpMaxrounds != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(MpMaxrounds);
    }
    if (MpWinlimit != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(MpWinlimit);
    }
    if (MpTimelimit != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(MpTimelimit);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Fraglimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Fraglimit);
    }
    if (MpMaxrounds != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpMaxrounds);
    }
    if (MpWinlimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpWinlimit);
    }
    if (MpTimelimit != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MpTimelimit);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_MatchEndConditions other) {
    if (other == null) {
      return;
    }
    if (other.Fraglimit != 0) {
      Fraglimit = other.Fraglimit;
    }
    if (other.MpMaxrounds != 0) {
      MpMaxrounds = other.MpMaxrounds;
    }
    if (other.MpWinlimit != 0) {
      MpWinlimit = other.MpWinlimit;
    }
    if (other.MpTimelimit != 0) {
      MpTimelimit = other.MpTimelimit;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Fraglimit = input.ReadInt32();
          break;
        }
        case 16: {
          MpMaxrounds = input.ReadInt32();
          break;
        }
        case 24: {
          MpWinlimit = input.ReadInt32();
          break;
        }
        case 32: {
          MpTimelimit = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_DisplayInventory : pb::IMessage<CCSUsrMsg_DisplayInventory> {
  private static readonly pb::MessageParser<CCSUsrMsg_DisplayInventory> _parser = new pb::MessageParser<CCSUsrMsg_DisplayInventory>(() => new CCSUsrMsg_DisplayInventory());
  public static pb::MessageParser<CCSUsrMsg_DisplayInventory> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[28]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_DisplayInventory() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_DisplayInventory(CCSUsrMsg_DisplayInventory other) : this() {
    display_ = other.display_;
    userId_ = other.userId_;
  }

  public CCSUsrMsg_DisplayInventory Clone() {
    return new CCSUsrMsg_DisplayInventory(this);
  }

  public const int DisplayFieldNumber = 1;
  private bool display_;
  public bool Display {
    get { return display_; }
    set {
      display_ = value;
    }
  }

  public const int UserIdFieldNumber = 2;
  private int userId_;
  public int UserId {
    get { return userId_; }
    set {
      userId_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_DisplayInventory);
  }

  public bool Equals(CCSUsrMsg_DisplayInventory other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Display != other.Display) return false;
    if (UserId != other.UserId) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Display != false) hash ^= Display.GetHashCode();
    if (UserId != 0) hash ^= UserId.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Display != false) {
      output.WriteRawTag(8);
      output.WriteBool(Display);
    }
    if (UserId != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(UserId);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Display != false) {
      size += 1 + 1;
    }
    if (UserId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(UserId);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_DisplayInventory other) {
    if (other == null) {
      return;
    }
    if (other.Display != false) {
      Display = other.Display;
    }
    if (other.UserId != 0) {
      UserId = other.UserId;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Display = input.ReadBool();
          break;
        }
        case 16: {
          UserId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_CallVoteFailed : pb::IMessage<CCSUsrMsg_CallVoteFailed> {
  private static readonly pb::MessageParser<CCSUsrMsg_CallVoteFailed> _parser = new pb::MessageParser<CCSUsrMsg_CallVoteFailed>(() => new CCSUsrMsg_CallVoteFailed());
  public static pb::MessageParser<CCSUsrMsg_CallVoteFailed> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[29]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_CallVoteFailed() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_CallVoteFailed(CCSUsrMsg_CallVoteFailed other) : this() {
    reason_ = other.reason_;
    time_ = other.time_;
  }

  public CCSUsrMsg_CallVoteFailed Clone() {
    return new CCSUsrMsg_CallVoteFailed(this);
  }

  public const int ReasonFieldNumber = 1;
  private int reason_;
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  public const int TimeFieldNumber = 2;
  private int time_;
  public int Time {
    get { return time_; }
    set {
      time_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_CallVoteFailed);
  }

  public bool Equals(CCSUsrMsg_CallVoteFailed other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reason != other.Reason) return false;
    if (Time != other.Time) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Reason != 0) hash ^= Reason.GetHashCode();
    if (Time != 0) hash ^= Time.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Reason != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Reason);
    }
    if (Time != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Time);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    if (Time != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_CallVoteFailed other) {
    if (other == null) {
      return;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
    if (other.Time != 0) {
      Time = other.Time;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reason = input.ReadInt32();
          break;
        }
        case 16: {
          Time = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VoteStart : pb::IMessage<CCSUsrMsg_VoteStart> {
  private static readonly pb::MessageParser<CCSUsrMsg_VoteStart> _parser = new pb::MessageParser<CCSUsrMsg_VoteStart>(() => new CCSUsrMsg_VoteStart());
  public static pb::MessageParser<CCSUsrMsg_VoteStart> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[30]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VoteStart() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VoteStart(CCSUsrMsg_VoteStart other) : this() {
    team_ = other.team_;
    entIdx_ = other.entIdx_;
    voteType_ = other.voteType_;
    dispStr_ = other.dispStr_;
    detailsStr_ = other.detailsStr_;
    otherTeamStr_ = other.otherTeamStr_;
    isYesNoVote_ = other.isYesNoVote_;
  }

  public CCSUsrMsg_VoteStart Clone() {
    return new CCSUsrMsg_VoteStart(this);
  }

  public const int TeamFieldNumber = 1;
  private int team_;
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  public const int EntIdxFieldNumber = 2;
  private int entIdx_;
  public int EntIdx {
    get { return entIdx_; }
    set {
      entIdx_ = value;
    }
  }

  public const int VoteTypeFieldNumber = 3;
  private int voteType_;
  public int VoteType {
    get { return voteType_; }
    set {
      voteType_ = value;
    }
  }

  public const int DispStrFieldNumber = 4;
  private string dispStr_ = "";
  public string DispStr {
    get { return dispStr_; }
    set {
      dispStr_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int DetailsStrFieldNumber = 5;
  private string detailsStr_ = "";
  public string DetailsStr {
    get { return detailsStr_; }
    set {
      detailsStr_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int OtherTeamStrFieldNumber = 6;
  private string otherTeamStr_ = "";
  public string OtherTeamStr {
    get { return otherTeamStr_; }
    set {
      otherTeamStr_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int IsYesNoVoteFieldNumber = 7;
  private bool isYesNoVote_;
  public bool IsYesNoVote {
    get { return isYesNoVote_; }
    set {
      isYesNoVote_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VoteStart);
  }

  public bool Equals(CCSUsrMsg_VoteStart other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team != other.Team) return false;
    if (EntIdx != other.EntIdx) return false;
    if (VoteType != other.VoteType) return false;
    if (DispStr != other.DispStr) return false;
    if (DetailsStr != other.DetailsStr) return false;
    if (OtherTeamStr != other.OtherTeamStr) return false;
    if (IsYesNoVote != other.IsYesNoVote) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Team != 0) hash ^= Team.GetHashCode();
    if (EntIdx != 0) hash ^= EntIdx.GetHashCode();
    if (VoteType != 0) hash ^= VoteType.GetHashCode();
    if (DispStr.Length != 0) hash ^= DispStr.GetHashCode();
    if (DetailsStr.Length != 0) hash ^= DetailsStr.GetHashCode();
    if (OtherTeamStr.Length != 0) hash ^= OtherTeamStr.GetHashCode();
    if (IsYesNoVote != false) hash ^= IsYesNoVote.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Team != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team);
    }
    if (EntIdx != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(EntIdx);
    }
    if (VoteType != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(VoteType);
    }
    if (DispStr.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DispStr);
    }
    if (DetailsStr.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DetailsStr);
    }
    if (OtherTeamStr.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(OtherTeamStr);
    }
    if (IsYesNoVote != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsYesNoVote);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (EntIdx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(EntIdx);
    }
    if (VoteType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoteType);
    }
    if (DispStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DispStr);
    }
    if (DetailsStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DetailsStr);
    }
    if (OtherTeamStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(OtherTeamStr);
    }
    if (IsYesNoVote != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VoteStart other) {
    if (other == null) {
      return;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.EntIdx != 0) {
      EntIdx = other.EntIdx;
    }
    if (other.VoteType != 0) {
      VoteType = other.VoteType;
    }
    if (other.DispStr.Length != 0) {
      DispStr = other.DispStr;
    }
    if (other.DetailsStr.Length != 0) {
      DetailsStr = other.DetailsStr;
    }
    if (other.OtherTeamStr.Length != 0) {
      OtherTeamStr = other.OtherTeamStr;
    }
    if (other.IsYesNoVote != false) {
      IsYesNoVote = other.IsYesNoVote;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team = input.ReadInt32();
          break;
        }
        case 16: {
          EntIdx = input.ReadInt32();
          break;
        }
        case 24: {
          VoteType = input.ReadInt32();
          break;
        }
        case 34: {
          DispStr = input.ReadString();
          break;
        }
        case 42: {
          DetailsStr = input.ReadString();
          break;
        }
        case 50: {
          OtherTeamStr = input.ReadString();
          break;
        }
        case 56: {
          IsYesNoVote = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VotePass : pb::IMessage<CCSUsrMsg_VotePass> {
  private static readonly pb::MessageParser<CCSUsrMsg_VotePass> _parser = new pb::MessageParser<CCSUsrMsg_VotePass>(() => new CCSUsrMsg_VotePass());
  public static pb::MessageParser<CCSUsrMsg_VotePass> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[31]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VotePass() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VotePass(CCSUsrMsg_VotePass other) : this() {
    team_ = other.team_;
    voteType_ = other.voteType_;
    dispStr_ = other.dispStr_;
    detailsStr_ = other.detailsStr_;
  }

  public CCSUsrMsg_VotePass Clone() {
    return new CCSUsrMsg_VotePass(this);
  }

  public const int TeamFieldNumber = 1;
  private int team_;
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  public const int VoteTypeFieldNumber = 2;
  private int voteType_;
  public int VoteType {
    get { return voteType_; }
    set {
      voteType_ = value;
    }
  }

  public const int DispStrFieldNumber = 3;
  private string dispStr_ = "";
  public string DispStr {
    get { return dispStr_; }
    set {
      dispStr_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int DetailsStrFieldNumber = 4;
  private string detailsStr_ = "";
  public string DetailsStr {
    get { return detailsStr_; }
    set {
      detailsStr_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VotePass);
  }

  public bool Equals(CCSUsrMsg_VotePass other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team != other.Team) return false;
    if (VoteType != other.VoteType) return false;
    if (DispStr != other.DispStr) return false;
    if (DetailsStr != other.DetailsStr) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Team != 0) hash ^= Team.GetHashCode();
    if (VoteType != 0) hash ^= VoteType.GetHashCode();
    if (DispStr.Length != 0) hash ^= DispStr.GetHashCode();
    if (DetailsStr.Length != 0) hash ^= DetailsStr.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Team != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team);
    }
    if (VoteType != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(VoteType);
    }
    if (DispStr.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DispStr);
    }
    if (DetailsStr.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DetailsStr);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (VoteType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(VoteType);
    }
    if (DispStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DispStr);
    }
    if (DetailsStr.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DetailsStr);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VotePass other) {
    if (other == null) {
      return;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.VoteType != 0) {
      VoteType = other.VoteType;
    }
    if (other.DispStr.Length != 0) {
      DispStr = other.DispStr;
    }
    if (other.DetailsStr.Length != 0) {
      DetailsStr = other.DetailsStr;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team = input.ReadInt32();
          break;
        }
        case 16: {
          VoteType = input.ReadInt32();
          break;
        }
        case 26: {
          DispStr = input.ReadString();
          break;
        }
        case 34: {
          DetailsStr = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VoteFailed : pb::IMessage<CCSUsrMsg_VoteFailed> {
  private static readonly pb::MessageParser<CCSUsrMsg_VoteFailed> _parser = new pb::MessageParser<CCSUsrMsg_VoteFailed>(() => new CCSUsrMsg_VoteFailed());
  public static pb::MessageParser<CCSUsrMsg_VoteFailed> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[32]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VoteFailed() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VoteFailed(CCSUsrMsg_VoteFailed other) : this() {
    team_ = other.team_;
    reason_ = other.reason_;
  }

  public CCSUsrMsg_VoteFailed Clone() {
    return new CCSUsrMsg_VoteFailed(this);
  }

  public const int TeamFieldNumber = 1;
  private int team_;
  public int Team {
    get { return team_; }
    set {
      team_ = value;
    }
  }

  public const int ReasonFieldNumber = 2;
  private int reason_;
  public int Reason {
    get { return reason_; }
    set {
      reason_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VoteFailed);
  }

  public bool Equals(CCSUsrMsg_VoteFailed other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Team != other.Team) return false;
    if (Reason != other.Reason) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Team != 0) hash ^= Team.GetHashCode();
    if (Reason != 0) hash ^= Reason.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Team != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Team);
    }
    if (Reason != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Reason);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Team != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Team);
    }
    if (Reason != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Reason);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VoteFailed other) {
    if (other == null) {
      return;
    }
    if (other.Team != 0) {
      Team = other.Team;
    }
    if (other.Reason != 0) {
      Reason = other.Reason;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Team = input.ReadInt32();
          break;
        }
        case 16: {
          Reason = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_VoteSetup : pb::IMessage<CCSUsrMsg_VoteSetup> {
  private static readonly pb::MessageParser<CCSUsrMsg_VoteSetup> _parser = new pb::MessageParser<CCSUsrMsg_VoteSetup>(() => new CCSUsrMsg_VoteSetup());
  public static pb::MessageParser<CCSUsrMsg_VoteSetup> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[33]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_VoteSetup() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_VoteSetup(CCSUsrMsg_VoteSetup other) : this() {
    potentialIssues_ = other.potentialIssues_.Clone();
  }

  public CCSUsrMsg_VoteSetup Clone() {
    return new CCSUsrMsg_VoteSetup(this);
  }

  public const int PotentialIssuesFieldNumber = 1;
  private static readonly pb::FieldCodec<string> _repeated_potentialIssues_codec
      = pb::FieldCodec.ForString(10);
  private readonly pbc::RepeatedField<string> potentialIssues_ = new pbc::RepeatedField<string>();
  public pbc::RepeatedField<string> PotentialIssues {
    get { return potentialIssues_; }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_VoteSetup);
  }

  public bool Equals(CCSUsrMsg_VoteSetup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!potentialIssues_.Equals(other.potentialIssues_)) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    hash ^= potentialIssues_.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    potentialIssues_.WriteTo(output, _repeated_potentialIssues_codec);
  }

  public int CalculateSize() {
    int size = 0;
    size += potentialIssues_.CalculateSize(_repeated_potentialIssues_codec);
    return size;
  }

  public void MergeFrom(CCSUsrMsg_VoteSetup other) {
    if (other == null) {
      return;
    }
    potentialIssues_.Add(other.potentialIssues_);
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          potentialIssues_.AddEntriesFrom(input, _repeated_potentialIssues_codec);
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_SendLastKillerDamageToClient : pb::IMessage<CCSUsrMsg_SendLastKillerDamageToClient> {
  private static readonly pb::MessageParser<CCSUsrMsg_SendLastKillerDamageToClient> _parser = new pb::MessageParser<CCSUsrMsg_SendLastKillerDamageToClient>(() => new CCSUsrMsg_SendLastKillerDamageToClient());
  public static pb::MessageParser<CCSUsrMsg_SendLastKillerDamageToClient> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[34]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_SendLastKillerDamageToClient() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_SendLastKillerDamageToClient(CCSUsrMsg_SendLastKillerDamageToClient other) : this() {
    numHitsGiven_ = other.numHitsGiven_;
    damageGiven_ = other.damageGiven_;
    numHitsTaken_ = other.numHitsTaken_;
    damageTaken_ = other.damageTaken_;
  }

  public CCSUsrMsg_SendLastKillerDamageToClient Clone() {
    return new CCSUsrMsg_SendLastKillerDamageToClient(this);
  }

  public const int NumHitsGivenFieldNumber = 1;
  private int numHitsGiven_;
  public int NumHitsGiven {
    get { return numHitsGiven_; }
    set {
      numHitsGiven_ = value;
    }
  }

  public const int DamageGivenFieldNumber = 2;
  private int damageGiven_;
  public int DamageGiven {
    get { return damageGiven_; }
    set {
      damageGiven_ = value;
    }
  }

  public const int NumHitsTakenFieldNumber = 3;
  private int numHitsTaken_;
  public int NumHitsTaken {
    get { return numHitsTaken_; }
    set {
      numHitsTaken_ = value;
    }
  }

  public const int DamageTakenFieldNumber = 4;
  private int damageTaken_;
  public int DamageTaken {
    get { return damageTaken_; }
    set {
      damageTaken_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_SendLastKillerDamageToClient);
  }

  public bool Equals(CCSUsrMsg_SendLastKillerDamageToClient other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (NumHitsGiven != other.NumHitsGiven) return false;
    if (DamageGiven != other.DamageGiven) return false;
    if (NumHitsTaken != other.NumHitsTaken) return false;
    if (DamageTaken != other.DamageTaken) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (NumHitsGiven != 0) hash ^= NumHitsGiven.GetHashCode();
    if (DamageGiven != 0) hash ^= DamageGiven.GetHashCode();
    if (NumHitsTaken != 0) hash ^= NumHitsTaken.GetHashCode();
    if (DamageTaken != 0) hash ^= DamageTaken.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (NumHitsGiven != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(NumHitsGiven);
    }
    if (DamageGiven != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DamageGiven);
    }
    if (NumHitsTaken != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(NumHitsTaken);
    }
    if (DamageTaken != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(DamageTaken);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (NumHitsGiven != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumHitsGiven);
    }
    if (DamageGiven != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageGiven);
    }
    if (NumHitsTaken != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(NumHitsTaken);
    }
    if (DamageTaken != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageTaken);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_SendLastKillerDamageToClient other) {
    if (other == null) {
      return;
    }
    if (other.NumHitsGiven != 0) {
      NumHitsGiven = other.NumHitsGiven;
    }
    if (other.DamageGiven != 0) {
      DamageGiven = other.DamageGiven;
    }
    if (other.NumHitsTaken != 0) {
      NumHitsTaken = other.NumHitsTaken;
    }
    if (other.DamageTaken != 0) {
      DamageTaken = other.DamageTaken;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          NumHitsGiven = input.ReadInt32();
          break;
        }
        case 16: {
          DamageGiven = input.ReadInt32();
          break;
        }
        case 24: {
          NumHitsTaken = input.ReadInt32();
          break;
        }
        case 32: {
          DamageTaken = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ItemPickup : pb::IMessage<CCSUsrMsg_ItemPickup> {
  private static readonly pb::MessageParser<CCSUsrMsg_ItemPickup> _parser = new pb::MessageParser<CCSUsrMsg_ItemPickup>(() => new CCSUsrMsg_ItemPickup());
  public static pb::MessageParser<CCSUsrMsg_ItemPickup> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[35]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ItemPickup() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ItemPickup(CCSUsrMsg_ItemPickup other) : this() {
    item_ = other.item_;
  }

  public CCSUsrMsg_ItemPickup Clone() {
    return new CCSUsrMsg_ItemPickup(this);
  }

  public const int ItemFieldNumber = 1;
  private string item_ = "";
  public string Item {
    get { return item_; }
    set {
      item_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ItemPickup);
  }

  public bool Equals(CCSUsrMsg_ItemPickup other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Item != other.Item) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Item.Length != 0) hash ^= Item.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Item.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Item);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Item.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Item);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ItemPickup other) {
    if (other == null) {
      return;
    }
    if (other.Item.Length != 0) {
      Item = other.Item;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Item = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ShowMenu : pb::IMessage<CCSUsrMsg_ShowMenu> {
  private static readonly pb::MessageParser<CCSUsrMsg_ShowMenu> _parser = new pb::MessageParser<CCSUsrMsg_ShowMenu>(() => new CCSUsrMsg_ShowMenu());
  public static pb::MessageParser<CCSUsrMsg_ShowMenu> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[36]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ShowMenu() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ShowMenu(CCSUsrMsg_ShowMenu other) : this() {
    bitsValidSlots_ = other.bitsValidSlots_;
    displayTime_ = other.displayTime_;
    menuString_ = other.menuString_;
  }

  public CCSUsrMsg_ShowMenu Clone() {
    return new CCSUsrMsg_ShowMenu(this);
  }

  public const int BitsValidSlotsFieldNumber = 1;
  private int bitsValidSlots_;
  public int BitsValidSlots {
    get { return bitsValidSlots_; }
    set {
      bitsValidSlots_ = value;
    }
  }

  public const int DisplayTimeFieldNumber = 2;
  private int displayTime_;
  public int DisplayTime {
    get { return displayTime_; }
    set {
      displayTime_ = value;
    }
  }

  public const int MenuStringFieldNumber = 3;
  private string menuString_ = "";
  public string MenuString {
    get { return menuString_; }
    set {
      menuString_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ShowMenu);
  }

  public bool Equals(CCSUsrMsg_ShowMenu other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BitsValidSlots != other.BitsValidSlots) return false;
    if (DisplayTime != other.DisplayTime) return false;
    if (MenuString != other.MenuString) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (BitsValidSlots != 0) hash ^= BitsValidSlots.GetHashCode();
    if (DisplayTime != 0) hash ^= DisplayTime.GetHashCode();
    if (MenuString.Length != 0) hash ^= MenuString.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (BitsValidSlots != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(BitsValidSlots);
    }
    if (DisplayTime != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(DisplayTime);
    }
    if (MenuString.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(MenuString);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (BitsValidSlots != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BitsValidSlots);
    }
    if (DisplayTime != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisplayTime);
    }
    if (MenuString.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(MenuString);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ShowMenu other) {
    if (other == null) {
      return;
    }
    if (other.BitsValidSlots != 0) {
      BitsValidSlots = other.BitsValidSlots;
    }
    if (other.DisplayTime != 0) {
      DisplayTime = other.DisplayTime;
    }
    if (other.MenuString.Length != 0) {
      MenuString = other.MenuString;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          BitsValidSlots = input.ReadInt32();
          break;
        }
        case 16: {
          DisplayTime = input.ReadInt32();
          break;
        }
        case 26: {
          MenuString = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_BarTime : pb::IMessage<CCSUsrMsg_BarTime> {
  private static readonly pb::MessageParser<CCSUsrMsg_BarTime> _parser = new pb::MessageParser<CCSUsrMsg_BarTime>(() => new CCSUsrMsg_BarTime());
  public static pb::MessageParser<CCSUsrMsg_BarTime> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[37]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_BarTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_BarTime(CCSUsrMsg_BarTime other) : this() {
    time_ = other.time_;
  }

  public CCSUsrMsg_BarTime Clone() {
    return new CCSUsrMsg_BarTime(this);
  }

  public const int TimeFieldNumber = 1;
  private string time_ = "";
  public string Time {
    get { return time_; }
    set {
      time_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_BarTime);
  }

  public bool Equals(CCSUsrMsg_BarTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Time != other.Time) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Time.Length != 0) hash ^= Time.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Time.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Time);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Time.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Time);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_BarTime other) {
    if (other == null) {
      return;
    }
    if (other.Time.Length != 0) {
      Time = other.Time;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Time = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_AmmoDenied : pb::IMessage<CCSUsrMsg_AmmoDenied> {
  private static readonly pb::MessageParser<CCSUsrMsg_AmmoDenied> _parser = new pb::MessageParser<CCSUsrMsg_AmmoDenied>(() => new CCSUsrMsg_AmmoDenied());
  public static pb::MessageParser<CCSUsrMsg_AmmoDenied> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[38]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_AmmoDenied() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_AmmoDenied(CCSUsrMsg_AmmoDenied other) : this() {
    ammoIdx_ = other.ammoIdx_;
  }

  public CCSUsrMsg_AmmoDenied Clone() {
    return new CCSUsrMsg_AmmoDenied(this);
  }

  public const int AmmoIdxFieldNumber = 1;
  private int ammoIdx_;
  public int AmmoIdx {
    get { return ammoIdx_; }
    set {
      ammoIdx_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_AmmoDenied);
  }

  public bool Equals(CCSUsrMsg_AmmoDenied other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AmmoIdx != other.AmmoIdx) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (AmmoIdx != 0) hash ^= AmmoIdx.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (AmmoIdx != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(AmmoIdx);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (AmmoIdx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AmmoIdx);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_AmmoDenied other) {
    if (other == null) {
      return;
    }
    if (other.AmmoIdx != 0) {
      AmmoIdx = other.AmmoIdx;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          AmmoIdx = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_MarkAchievement : pb::IMessage<CCSUsrMsg_MarkAchievement> {
  private static readonly pb::MessageParser<CCSUsrMsg_MarkAchievement> _parser = new pb::MessageParser<CCSUsrMsg_MarkAchievement>(() => new CCSUsrMsg_MarkAchievement());
  public static pb::MessageParser<CCSUsrMsg_MarkAchievement> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[39]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_MarkAchievement() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_MarkAchievement(CCSUsrMsg_MarkAchievement other) : this() {
    achievement_ = other.achievement_;
  }

  public CCSUsrMsg_MarkAchievement Clone() {
    return new CCSUsrMsg_MarkAchievement(this);
  }

  public const int AchievementFieldNumber = 1;
  private string achievement_ = "";
  public string Achievement {
    get { return achievement_; }
    set {
      achievement_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_MarkAchievement);
  }

  public bool Equals(CCSUsrMsg_MarkAchievement other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Achievement != other.Achievement) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Achievement.Length != 0) hash ^= Achievement.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Achievement.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Achievement);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Achievement.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Achievement);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_MarkAchievement other) {
    if (other == null) {
      return;
    }
    if (other.Achievement.Length != 0) {
      Achievement = other.Achievement;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          Achievement = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ItemDrop : pb::IMessage<CCSUsrMsg_ItemDrop> {
  private static readonly pb::MessageParser<CCSUsrMsg_ItemDrop> _parser = new pb::MessageParser<CCSUsrMsg_ItemDrop>(() => new CCSUsrMsg_ItemDrop());
  public static pb::MessageParser<CCSUsrMsg_ItemDrop> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[40]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ItemDrop() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ItemDrop(CCSUsrMsg_ItemDrop other) : this() {
    itemid_ = other.itemid_;
    death_ = other.death_;
  }

  public CCSUsrMsg_ItemDrop Clone() {
    return new CCSUsrMsg_ItemDrop(this);
  }

  public const int ItemidFieldNumber = 1;
  private long itemid_;
  public long Itemid {
    get { return itemid_; }
    set {
      itemid_ = value;
    }
  }

  public const int DeathFieldNumber = 2;
  private bool death_;
  public bool Death {
    get { return death_; }
    set {
      death_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ItemDrop);
  }

  public bool Equals(CCSUsrMsg_ItemDrop other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Itemid != other.Itemid) return false;
    if (Death != other.Death) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Itemid != 0L) hash ^= Itemid.GetHashCode();
    if (Death != false) hash ^= Death.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Itemid != 0L) {
      output.WriteRawTag(8);
      output.WriteInt64(Itemid);
    }
    if (Death != false) {
      output.WriteRawTag(16);
      output.WriteBool(Death);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Itemid != 0L) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Itemid);
    }
    if (Death != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ItemDrop other) {
    if (other == null) {
      return;
    }
    if (other.Itemid != 0L) {
      Itemid = other.Itemid;
    }
    if (other.Death != false) {
      Death = other.Death;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Itemid = input.ReadInt64();
          break;
        }
        case 16: {
          Death = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_GlowPropTurnOff : pb::IMessage<CCSUsrMsg_GlowPropTurnOff> {
  private static readonly pb::MessageParser<CCSUsrMsg_GlowPropTurnOff> _parser = new pb::MessageParser<CCSUsrMsg_GlowPropTurnOff>(() => new CCSUsrMsg_GlowPropTurnOff());
  public static pb::MessageParser<CCSUsrMsg_GlowPropTurnOff> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[41]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_GlowPropTurnOff() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_GlowPropTurnOff(CCSUsrMsg_GlowPropTurnOff other) : this() {
    entidx_ = other.entidx_;
  }

  public CCSUsrMsg_GlowPropTurnOff Clone() {
    return new CCSUsrMsg_GlowPropTurnOff(this);
  }

  public const int EntidxFieldNumber = 1;
  private int entidx_;
  public int Entidx {
    get { return entidx_; }
    set {
      entidx_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_GlowPropTurnOff);
  }

  public bool Equals(CCSUsrMsg_GlowPropTurnOff other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Entidx != other.Entidx) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Entidx != 0) hash ^= Entidx.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Entidx != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Entidx);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Entidx != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Entidx);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_GlowPropTurnOff other) {
    if (other == null) {
      return;
    }
    if (other.Entidx != 0) {
      Entidx = other.Entidx;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Entidx = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_RoundBackupFilenames : pb::IMessage<CCSUsrMsg_RoundBackupFilenames> {
  private static readonly pb::MessageParser<CCSUsrMsg_RoundBackupFilenames> _parser = new pb::MessageParser<CCSUsrMsg_RoundBackupFilenames>(() => new CCSUsrMsg_RoundBackupFilenames());
  public static pb::MessageParser<CCSUsrMsg_RoundBackupFilenames> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[42]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_RoundBackupFilenames() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_RoundBackupFilenames(CCSUsrMsg_RoundBackupFilenames other) : this() {
    count_ = other.count_;
    index_ = other.index_;
    filename_ = other.filename_;
    nicename_ = other.nicename_;
  }

  public CCSUsrMsg_RoundBackupFilenames Clone() {
    return new CCSUsrMsg_RoundBackupFilenames(this);
  }

  public const int CountFieldNumber = 1;
  private int count_;
  public int Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  public const int IndexFieldNumber = 2;
  private int index_;
  public int Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  public const int FilenameFieldNumber = 3;
  private string filename_ = "";
  public string Filename {
    get { return filename_; }
    set {
      filename_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public const int NicenameFieldNumber = 4;
  private string nicename_ = "";
  public string Nicename {
    get { return nicename_; }
    set {
      nicename_ = pb::Preconditions.CheckNotNull(value, "value");
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_RoundBackupFilenames);
  }

  public bool Equals(CCSUsrMsg_RoundBackupFilenames other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Count != other.Count) return false;
    if (Index != other.Index) return false;
    if (Filename != other.Filename) return false;
    if (Nicename != other.Nicename) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Filename.Length != 0) hash ^= Filename.GetHashCode();
    if (Nicename.Length != 0) hash ^= Nicename.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Count != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Count);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(Index);
    }
    if (Filename.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Filename);
    }
    if (Nicename.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Nicename);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
    }
    if (Filename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Filename);
    }
    if (Nicename.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nicename);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_RoundBackupFilenames other) {
    if (other == null) {
      return;
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Filename.Length != 0) {
      Filename = other.Filename;
    }
    if (other.Nicename.Length != 0) {
      Nicename = other.Nicename;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Count = input.ReadInt32();
          break;
        }
        case 16: {
          Index = input.ReadInt32();
          break;
        }
        case 26: {
          Filename = input.ReadString();
          break;
        }
        case 34: {
          Nicename = input.ReadString();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ResetHud : pb::IMessage<CCSUsrMsg_ResetHud> {
  private static readonly pb::MessageParser<CCSUsrMsg_ResetHud> _parser = new pb::MessageParser<CCSUsrMsg_ResetHud>(() => new CCSUsrMsg_ResetHud());
  public static pb::MessageParser<CCSUsrMsg_ResetHud> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[43]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ResetHud() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ResetHud(CCSUsrMsg_ResetHud other) : this() {
    reset_ = other.reset_;
  }

  public CCSUsrMsg_ResetHud Clone() {
    return new CCSUsrMsg_ResetHud(this);
  }

  public const int ResetFieldNumber = 1;
  private bool reset_;
  public bool Reset {
    get { return reset_; }
    set {
      reset_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ResetHud);
  }

  public bool Equals(CCSUsrMsg_ResetHud other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Reset != other.Reset) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Reset != false) hash ^= Reset.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Reset != false) {
      output.WriteRawTag(8);
      output.WriteBool(Reset);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Reset != false) {
      size += 1 + 1;
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ResetHud other) {
    if (other == null) {
      return;
    }
    if (other.Reset != false) {
      Reset = other.Reset;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Reset = input.ReadBool();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_GameTitle : pb::IMessage<CCSUsrMsg_GameTitle> {
  private static readonly pb::MessageParser<CCSUsrMsg_GameTitle> _parser = new pb::MessageParser<CCSUsrMsg_GameTitle>(() => new CCSUsrMsg_GameTitle());
  public static pb::MessageParser<CCSUsrMsg_GameTitle> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[44]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_GameTitle() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_GameTitle(CCSUsrMsg_GameTitle other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_GameTitle Clone() {
    return new CCSUsrMsg_GameTitle(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_GameTitle);
  }

  public bool Equals(CCSUsrMsg_GameTitle other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_GameTitle other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_RequestState : pb::IMessage<CCSUsrMsg_RequestState> {
  private static readonly pb::MessageParser<CCSUsrMsg_RequestState> _parser = new pb::MessageParser<CCSUsrMsg_RequestState>(() => new CCSUsrMsg_RequestState());
  public static pb::MessageParser<CCSUsrMsg_RequestState> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[45]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_RequestState() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_RequestState(CCSUsrMsg_RequestState other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_RequestState Clone() {
    return new CCSUsrMsg_RequestState(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_RequestState);
  }

  public bool Equals(CCSUsrMsg_RequestState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_RequestState other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_StopSpectatorMode : pb::IMessage<CCSUsrMsg_StopSpectatorMode> {
  private static readonly pb::MessageParser<CCSUsrMsg_StopSpectatorMode> _parser = new pb::MessageParser<CCSUsrMsg_StopSpectatorMode>(() => new CCSUsrMsg_StopSpectatorMode());
  public static pb::MessageParser<CCSUsrMsg_StopSpectatorMode> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[46]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_StopSpectatorMode() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_StopSpectatorMode(CCSUsrMsg_StopSpectatorMode other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_StopSpectatorMode Clone() {
    return new CCSUsrMsg_StopSpectatorMode(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_StopSpectatorMode);
  }

  public bool Equals(CCSUsrMsg_StopSpectatorMode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_StopSpectatorMode other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_DisconnectToLobby : pb::IMessage<CCSUsrMsg_DisconnectToLobby> {
  private static readonly pb::MessageParser<CCSUsrMsg_DisconnectToLobby> _parser = new pb::MessageParser<CCSUsrMsg_DisconnectToLobby>(() => new CCSUsrMsg_DisconnectToLobby());
  public static pb::MessageParser<CCSUsrMsg_DisconnectToLobby> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[47]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_DisconnectToLobby() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_DisconnectToLobby(CCSUsrMsg_DisconnectToLobby other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_DisconnectToLobby Clone() {
    return new CCSUsrMsg_DisconnectToLobby(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_DisconnectToLobby);
  }

  public bool Equals(CCSUsrMsg_DisconnectToLobby other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_DisconnectToLobby other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_WarmupHasEnded : pb::IMessage<CCSUsrMsg_WarmupHasEnded> {
  private static readonly pb::MessageParser<CCSUsrMsg_WarmupHasEnded> _parser = new pb::MessageParser<CCSUsrMsg_WarmupHasEnded>(() => new CCSUsrMsg_WarmupHasEnded());
  public static pb::MessageParser<CCSUsrMsg_WarmupHasEnded> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[48]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_WarmupHasEnded() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_WarmupHasEnded(CCSUsrMsg_WarmupHasEnded other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_WarmupHasEnded Clone() {
    return new CCSUsrMsg_WarmupHasEnded(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_WarmupHasEnded);
  }

  public bool Equals(CCSUsrMsg_WarmupHasEnded other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_WarmupHasEnded other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCSUsrMsg_ClientInfo : pb::IMessage<CCSUsrMsg_ClientInfo> {
  private static readonly pb::MessageParser<CCSUsrMsg_ClientInfo> _parser = new pb::MessageParser<CCSUsrMsg_ClientInfo>(() => new CCSUsrMsg_ClientInfo());
  public static pb::MessageParser<CCSUsrMsg_ClientInfo> Parser { get { return _parser; } }

  public static pbr::MessageDescriptor Descriptor {
    get { return global::Cstrike15UsermessagesPublic.Descriptor.MessageTypes[49]; }
  }

  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  public CCSUsrMsg_ClientInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  public CCSUsrMsg_ClientInfo(CCSUsrMsg_ClientInfo other) : this() {
    dummy_ = other.dummy_;
  }

  public CCSUsrMsg_ClientInfo Clone() {
    return new CCSUsrMsg_ClientInfo(this);
  }

  public const int DummyFieldNumber = 1;
  private int dummy_;
  public int Dummy {
    get { return dummy_; }
    set {
      dummy_ = value;
    }
  }

  public override bool Equals(object other) {
    return Equals(other as CCSUsrMsg_ClientInfo);
  }

  public bool Equals(CCSUsrMsg_ClientInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Dummy != other.Dummy) return false;
    return true;
  }

  public override int GetHashCode() {
    int hash = 1;
    if (Dummy != 0) hash ^= Dummy.GetHashCode();
    return hash;
  }

  public override string ToString() {
    return pb::JsonFormatter.Default.Format(this);
  }

  public void WriteTo(pb::CodedOutputStream output) {
    if (Dummy != 0) {
      output.WriteRawTag(8);
      output.WriteInt32(Dummy);
    }
  }

  public int CalculateSize() {
    int size = 0;
    if (Dummy != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Dummy);
    }
    return size;
  }

  public void MergeFrom(CCSUsrMsg_ClientInfo other) {
    if (other == null) {
      return;
    }
    if (other.Dummy != 0) {
      Dummy = other.Dummy;
    }
  }

  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 8: {
          Dummy = input.ReadInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
